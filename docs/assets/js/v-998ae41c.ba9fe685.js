"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[576],{6136:(n,s,a)=>{a.r(s),a.d(s,{default:()=>c});var t=a(6252);const p=(0,t.uE)('<h1 id="模版字符语法" tabindex="-1"><a class="header-anchor" href="#模版字符语法" aria-hidden="true">#</a> 模版字符语法</h1><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">EventName<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">T</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">Changed</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T0</span></span> <span class="token operator">=</span> EventName<span class="token operator">&lt;</span><span class="token string">&#39;foo&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;fooChanged&#39;</span>\n<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">T1</span></span> <span class="token operator">=</span> EventName<span class="token operator">&lt;</span><span class="token string">&#39;foo&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;bar&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;baz&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>  <span class="token comment">// &#39;fooChanged&#39; | &#39;barChanged&#39; | &#39;bazChanged&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="关键字" tabindex="-1"><a class="header-anchor" href="#关键字" aria-hidden="true">#</a> 关键字</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>uppercase<span class="token punctuation">,</span> lowercase<span class="token punctuation">,</span> capitalize<span class="token punctuation">,</span> uncapitalize\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="join实现" tabindex="-1"><a class="header-anchor" href="#join实现" aria-hidden="true">#</a> join实现</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">Join<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">boolean</span> <span class="token operator">|</span> bigint<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">D</span> <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>\n  <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token comment">// 空数组</span>\n    <span class="token string">&#39;&#39;</span> <span class="token operator">:</span>\n    <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token comment">// 只有一位</span>\n      <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span>\n      <span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token punctuation">[</span><span class="token builtin">unknown</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token keyword">infer</span> <span class="token constant">U</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token comment">// 多位</span>\n        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">D</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>Join<span class="token operator">&lt;</span><span class="token constant">U</span><span class="token punctuation">,</span> <span class="token constant">D</span><span class="token operator">&gt;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">:</span> <span class="token comment">// 递归返回</span>\n        <span class="token builtin">string</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="lodash-get实现" tabindex="-1"><a class="header-anchor" href="#lodash-get实现" aria-hidden="true">#</a> lodash get实现</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">PropType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> Paths <span class="token keyword">extends</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span>\n  <span class="token builtin">string</span> <span class="token keyword">extends</span> <span class="token class-name">Paths</span> <span class="token operator">?</span> <span class="token comment">// 不能传入 string 只能传入 &#39;&#39;</span>\n    <span class="token builtin">unknown</span> <span class="token operator">:</span>\n    Paths <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">?</span> <span class="token comment">// 如果只是单个属性，就直接返回</span>\n      <span class="token constant">T</span><span class="token punctuation">[</span>Paths<span class="token punctuation">]</span> <span class="token operator">:</span>\n      Paths <span class="token keyword">extends</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">K</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">infer</span> <span class="token constant">R</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token operator">?</span> <span class="token comment">// 如果有 . 语法</span>\n        <span class="token constant">K</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token constant">T</span> <span class="token operator">?</span> <span class="token comment">// 提取出第一个 key</span>\n          PropType<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">[</span><span class="token constant">K</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">R</span><span class="token operator">&gt;</span> <span class="token comment">// 递归</span>\n          <span class="token operator">:</span> <span class="token builtin">unknown</span>\n        <span class="token operator">:</span> <span class="token builtin">unknown</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="infer-细节行为" tabindex="-1"><a class="header-anchor" href="#infer-细节行为" aria-hidden="true">#</a> infer 细节行为</h2><ol><li><p>字符串模板中的 infer 会一直匹配到字符串的结尾，比如用 ${infer T}x 去匹配 &#39;abcxxx&#39; 会把 T 推断为 &#39;abcxx&#39;。</p></li><li><p>字符串模板中两个 infer 相邻，第一个 infer 只会推断出单个字符，这有助于一些递归操作，比如 ${infer H}${infer T} 去推断 abcd，H 会推断为 a，而 T 会推断为 bcd。</p></li></ol><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h2>',12),e={href:"https://juejin.im/post/6867785919693832200",target:"_blank",rel:"noopener noreferrer"},o=(0,t.Uk)("TypeScript 4.1 新特性：字符串模板类型，Vuex 终于有救了？"),l={},c=(0,a(3744).Z)(l,[["render",function(n,s){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.iD)(t.HY,null,[p,(0,t._)("ul",null,[(0,t._)("li",null,[(0,t._)("a",e,[o,(0,t.Wm)(a)])])])],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,t]of s)a[n]=t;return a}},4505:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-998ae41c",path:"/notes/Typescript/TemplateLiteralTypes.html",title:"模版字符语法",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"基本用法",slug:"基本用法",children:[]},{level:2,title:"关键字",slug:"关键字",children:[]},{level:2,title:"join实现",slug:"join实现",children:[]},{level:2,title:"lodash get实现",slug:"lodash-get实现",children:[]},{level:2,title:"infer 细节行为",slug:"infer-细节行为",children:[]},{level:2,title:"参考资料",slug:"参考资料",children:[]}],filePathRelative:"notes/Typescript/TemplateLiteralTypes.md",git:{updatedTime:1605085458e3}}}}]);