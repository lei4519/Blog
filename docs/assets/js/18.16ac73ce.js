(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{395:function(t,a,s){"use strict";s.r(a);var n=s(11),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"小程序框架原理总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小程序框架原理总结"}},[t._v("#")]),t._v(" 小程序框架原理总结")]),t._v(" "),s("h2",{attrs:{id:"实现方案分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现方案分类"}},[t._v("#")]),t._v(" 实现方案分类")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("编译型：Taro 1、2")]),t._v(" "),s("ul",[s("li",[t._v("通过babel对代码进行转换，编译结束后完全是小程序的代码。")])])]),t._v(" "),s("li",[s("p",[t._v("半编译、半运行时：uni-app、mpvue")]),t._v(" "),s("ul",[s("li",[t._v("模板层编译转换、运行时做语法兼容")])])]),t._v(" "),s("li",[s("p",[t._v("运行时：Remax、Taro next、Kbone")]),t._v(" "),s("ul",[s("li",[t._v("纯运行时，模板层只有一个固定的模板wxml，通过运行时生成的vnode来渲染视图。")])])])]),t._v(" "),s("h2",{attrs:{id:"编译型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译型"}},[t._v("#")]),t._v(" 编译型")]),t._v(" "),s("p",[t._v("Taro 1、2可以让我们使用类react语法开发小程序，之所以说是类react语法，是因为这些“react”代码在编译完成之后，会被全部编程小程序的原生语法，里面是没有react参与的。")]),t._v(" "),s("p",[t._v("这也导致在Taro 1、2中写JSX时，需要遵照官方文档中的规范，否则运行时就会出现问题。")]),t._v(" "),s("p",[t._v("并且由于JSX的灵活性，将JSX转换成小程序模板时，是一件工作量非常大的事情。")]),t._v(" "),s("p",[t._v("Taro就是用穷举法硬生生的将JSX全部转换成了模板。但即使这样，依然会有问题，比如无法实时的享受react的新语法、新特性，大多数react生态都无法直接使用。即使用了穷举法，转换过程中还是会出现各种问题，Taro的大多数commit提交都是有关于模板转换的。")]),t._v(" "),s("h2",{attrs:{id:"半编译、半运行时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#半编译、半运行时"}},[t._v("#")]),t._v(" 半编译、半运行时")]),t._v(" "),s("p",[t._v("小程序的设计很明显是借鉴了vue，不管是模板的写法还是逻辑层的写法。所以相比起JSX转换的困难，vue代码在转换时就轻松很多了。")]),t._v(" "),s("p",[t._v("所以像mpvue、uni-app就是利用这一特性，将vue的模板转换成了小程序的wxml，这是其编译型的特性。")]),t._v(" "),s("p",[t._v("在编译时，并没有将逻辑层的代码转换成小程序原生的语法，而是完全的保留了vue的能力，这是其运行时的特性。")]),t._v(" "),s("p",[t._v("由于完全保留了vue的能力，也使得上述纯编译型框架的痛点得以解决。我们可以享受最新的语法特性，不用担心由于写法问题导致转换错误，可以方便的复用vue生态。")]),t._v(" "),s("p",[t._v("那现在留下的疑问就是：vue是浏览器中的运行时框架，它是怎么去操作改变小程序视图的呢？")]),t._v(" "),s("h3",{attrs:{id:"运行时原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行时原理"}},[t._v("#")]),t._v(" 运行时原理")]),t._v(" "),s("p",[t._v("首先，vue在浏览器中的运行流程如下：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("patch")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 浏览器视图\n")])])]),s("ol",[s("li",[t._v("初始化vue，监听响应式等工作。")]),t._v(" "),s("li",[t._v("调用render函数（手写或者通过vue-loader编译template生成），拿到虚拟dom（vnode）")]),t._v(" "),s("li",[t._v("patch函数用来做diff工作，然后将需要显示在视图中的vnode，使用原生的DOM API 插入到DOM树中。")])]),t._v(" "),s("p",[t._v("观察上述流程，发现只在第三步中涉及到了浏览器相关的东西。所以1、2步是完全可以在小程序中运行的。")]),t._v(" "),s("p",[t._v("所以只需要对第三步做适配，就可以将vue运行在小程序中了。")]),t._v(" "),s("p",[t._v("那如何做适配呢？当patch函数diff出需要更新渲染的vnode，就会去调用更新视图的API，在浏览器中那是DOM系列的API。而在小程序中，其只为我们提供了setData这个用来更改视图的方法，所以很明显，我们只需要在diff结束后，调用setData来更新视图就可以了。")]),t._v(" "),s("p",[t._v("这就又引出了另一个问题，patch出来的是vnode，而我们在模板中用的是data中的数据，所以肯定不能直接将vnode传到setData中，应该给setData传入data中改变的数据才对，那我们怎么才能拿到data中改变的数据呢？")]),t._v(" "),s("p",[t._v("说起改变的数据，可能第一反应是diff，我们将老的数据保存一份，当数据改变之后。对新旧数据进行diff，然后拿到差异数据，传入setData更新视图。")]),t._v(" "),s("p",[t._v("这样当然是可行的，我们只需要将patch中对比vnode的代码干掉，换成diff新旧数据的代码，这样diff结束后将结果传入setData即可。")]),t._v(" "),s("p",[t._v("但是这么做会有一个性能问题，如果data中有很多的数据，而在视图中我们只用到了一个简单的变量，这时对data数据进行全量diff就是一个很浪费时间的工作了。")]),t._v(" "),s("p",[t._v("所以我们可以用另一个方案来更高效的实现，让我们回到上一个问题，patch出来的是vnode，而传入setData的是data数据。那我们可不可以通过vnode来获取到data中改变的数据呢？")]),t._v(" "),s("p",[t._v("答案是可以的，因为我们会编译模板层的代码，所以在编译时，我们完全可以将相关的信息记录下来。")]),t._v(" "),s("p",[t._v("不废话，上代码：")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- vue template --\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("view")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("view")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{ text }}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("view")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("view")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("v-for")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item in list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{ item }}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("view")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("view")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- 编译后的wxml --\x3e")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("view")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("view")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{ text }}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("view")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("view")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("wx:")]),t._v("for")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("list"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("wx:")]),t._v("for-item")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("item"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("wx:")]),t._v("for-index")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{ list[i] }}"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("view")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("view")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("\x3c!-- template编译的render函数 --\x3e")]),t._v("\nrender(h) {\n  return h('view', null,\n    [\n      h('view', {path: 'text'}, text),\n      list.map((_, i) => {\n        return h('view', {path: 'list[i]'}, list[i])\n      })\n    ])\n}\n")])])]),s("p",[t._v("通过观察上面的三段代码，我们可以看到，在编译时，我们是可以感知到模板中使用的响应式数据，相对于data的访问路径。所以我们就可以将这些路径记录在vnode中，这样通过patch之后的vnode，我们就可以获取到对应数据的路径了。")]),t._v(" "),s("p",[t._v("并且通过这种方式，我们也可以避免给视图层传递无用的数据，每次diff之后，只会将视图层中用的数据传入setData。")]),t._v(" "),s("h2",{attrs:{id:"运行时"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运行时"}},[t._v("#")]),t._v(" 运行时")]),t._v(" "),s("p",[t._v("上面的半编译、半运行时框架只能用于vue，对react而言，其灵活的语法特性和底层架构注定与之无缘。难道说react就不能再小程序中运行了吗？")]),t._v(" "),s("p",[t._v("我们来回顾一下上一节中提到的")]),t._v(" "),s("blockquote",[s("p",[t._v("vue 的 patch函数 diff之后的结果是vnode，而模板中用的是data数据，所以我们不能将vnode传给setData，而应该找到对应的数据传给setData。")])]),t._v(" "),s("p",[t._v("再来回顾一下第一节中所说的")]),t._v(" "),s("blockquote",[s("p",[t._v("JSX的灵活性导致转换成wxml时的工作量巨大，并且要严格遵守规范，否则就会出问题。")])]),t._v(" "),s("p",[t._v("放飞你的大脑，我们来刚一下")]),t._v(" "),s("blockquote",[s("p",[t._v("vue 的 patch函数 diff之后的结果是vnode，而模板中用的是data数据，所以我们不能将vnode传给setData")])]),t._v(" "),s("p",[t._v("那就是说，如果模板中没有使用data数据，那我就可以将vnode传入setData喽。")]),t._v(" "),s("blockquote",[s("p",[t._v("JSX的灵活性导致转换成wxml时的工作量巨大，并且要严格遵守规范，否则就会出问题")])]),t._v(" "),s("p",[t._v("转换起来那么难，那我干脆不转了。JSX最后生成的是什么？vnode啊，我直接把vnode传给setData喽。")]),t._v(" "),s("p",[t._v("所以现在的问题变成了，小程序模板可以根据vnode对象来渲染视图吗？")]),t._v(" "),s("p",[t._v("答案是可以，方案就是小程序的"),s("code",[t._v("template")]),t._v("语法可以动态递归的调用渲染。")]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("tpl_view"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("view")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{{ className }}"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("block")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[s("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("wx:")]),t._v("for")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{{children}}"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("is")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("tpl_view"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("data")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("{{ item }}"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("block")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("view")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),s("blockquote",[s("p",[t._v("以上为伪代码，只为方便理解，实际上微信小程序不允许模板调用自身。")])]),t._v(" "),s("p",[t._v("上面定义了一个模板，我们只需要构建如下的数据结构，将其传入模板内，这个模板就可以根据数据生成对应结构的view元素")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  className"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      className"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1-1'")]),t._v("\n      children"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          className"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1-1-1'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          children"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("也就是说，如果我们将小程序的所有基础组件，全部都使用模板的形式定义一遍。那我们就可以传入一个描述对象（vnode，注意这个vnode不是vue或者react的），让wxml根据这个对象生成视图。")]),t._v(" "),s("p",[t._v("这也是目前Taro next、Remax在视图层的实现方式，如果打开Taro next编写的小程序代码就会发现里面有一个base.wxml，其中就是实现了所有的小程序基础组件的模板。")]),t._v(" "),s("p",[t._v("到此为止，视图层我们已经解决了，但是这个解决方案好像和react没有什么关系，理论了只要能产生wxml渲染模板的vnode，任何框架都可以这样实现。")]),t._v(" "),s("p",[t._v("事实上也是，用这种方案，可以很轻松的同时支持Vue和React这两种框架。Taro next就是如此。")]),t._v(" "),s("p",[t._v("接下来就说一说react的事")]),t._v(" "),s("h3",{attrs:{id:"实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),s("p",[t._v("react的源码相比vue更加复杂，但整体的思想并无太多差距，可以简单总结为")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("React"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("reconciler")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("renderer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 浏览器视图\n")])])]),s("ol",[s("li",[t._v("React.render做初始化工作")]),t._v(" "),s("li",[t._v("reconciler做diff工作，找出需要更新的vnode")]),t._v(" "),s("li",[t._v("renderer负责调用浏览器API将vnode渲染")])]),t._v(" "),s("p",[t._v("看过vue的实现之后，我们不难猜到，这里要动刀的肯定是renderer这一步了。")]),t._v(" "),s("p",[t._v("那如何做呢？别忘了我们的核心点是什么：构建出wxml用来遍历渲染的vnode。")]),t._v(" "),s("p",[t._v("我们重新翻译一下上面的第三步：")]),t._v(" "),s("blockquote",[s("p",[t._v("renderer负责将需要更新的虚拟vnode，通过DOM API转换成真实的dom。")])]),t._v(" "),s("p",[t._v("然后想想我们怎么实现呢？")]),t._v(" "),s("blockquote",[s("p",[t._v("renderer负责将需要更新的虚拟vnode，通过 【自定义 API】 转换成wxml用来遍历渲染的vnode。")])]),t._v(" "),s("p",[t._v("是的，就是这么“简单”，我们只需要将原本操作生成DOM的那套API，更改成操作生成vnode的API就可以啦~~~  完结！撒花❀❀❀❀❀❀❀❀❀❀❀")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("开玩笑，当然没那么“简单”，但是思想就是这样，不管是vue还是react，其实我们需要做的就是将更改DOM的API，换成更改vnode的API。")]),t._v(" "),s("p",[t._v("举个例子：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DOM API")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// vnode API")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    template_name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'tpl_'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" type\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("还有一个好消息就是，不管是React还是Vue，当需要操作DOM时，都不会直接在代码中调用DOM API，而是将操作统一封装到了工具函数中，这样我们就可以很方便的对这些API进行改写了。")]),t._v(" "),s("p",[t._v("更具体的实现，这里就不在赘述，可以看下面的参考链接去详细了解。")]),t._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://juejin.cn/post/6881597846307635214#heading-0",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入浅出主流的几款小程序跨端框架"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/83324871",target:"_blank",rel:"noopener noreferrer"}},[t._v("自己写个React渲染器: 以 Remax 为例(用React写小程序)"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=e.exports}}]);