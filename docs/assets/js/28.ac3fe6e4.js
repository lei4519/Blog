(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{405:function(t,s,a){"use strict";a.r(s);var e=a(11),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"正则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则"}},[t._v("#")]),t._v(" 正则")]),t._v(" "),a("p",[t._v("##字符匹配")]),t._v(" "),a("h3",{attrs:{id:"模糊匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模糊匹配"}},[t._v("#")]),t._v(" 模糊匹配")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("横向模糊匹配")]),t._v(" "),a("blockquote",[a("p",[t._v("匹配的字符串长度不是固定的，使用量词实现")])])]),t._v(" "),a("li",[a("p",[t._v("纵向模糊匹配")]),t._v(" "),a("blockquote",[a("p",[t._v("匹配的字符不是确定的，使用字符组实现")])])])]),t._v(" "),a("p",[t._v("###字符组")]),t._v(" "),a("blockquote",[a("p",[t._v('[abc]，表示匹配一个字符，它可以是 "a"、"b"、"c" 之一')])]),t._v(" "),a("ol",[a("li",[a("p",[t._v("范围表示法")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("[a-z0-9]")]),t._v(": 匹配a到z，0到9的字符")])])]),t._v(" "),a("li",[a("p",[t._v("排除字符组")]),t._v(" "),a("blockquote",[a("p",[t._v("使用"),a("code",[t._v("^")]),t._v("表示求反，"),a("code",[t._v("[^a-z]")]),t._v("匹配除了a到z的字符")])])]),t._v(" "),a("li",[a("p",[t._v("简写形式")])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("字符组")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("具体含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\d")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("表示 "),a("code",[t._v("[0-9]")]),t._v("。表示是一位数字。 记忆方式:其英文是 digit(数字)。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\D")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("表示 "),a("code",[t._v("[^0-9]")]),t._v("。表示除数字外的任意字符。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\w")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("表示 "),a("code",[t._v("[0-9a-zA-Z_]")]),t._v("。表示数字、大小写字母和下划线。 记忆方式:w 是 word 的简写，也称单词字符。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\W")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("表示 "),a("code",[t._v("[^0-9a-zA-Z_]")]),t._v("。非单词字符。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\s")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("表示 "),a("code",[t._v("[ \\t\\v\\n\\r\\f]")]),t._v("。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页 符。  记忆方式:s 是 space 的首字母，空白符的单词是 white space。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\S")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("表示 "),a("code",[t._v("[^ \\t\\v\\n\\r\\f]")]),t._v("。 非空白符。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v(".")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("表示 "),a("code",[t._v("[^\\n\\r\\u2028\\u2029]")]),t._v("。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符 除外。  记忆方式:想想省略号 ... 中的每个点，都可以理解成占位符，表示任何类似的东西。")])])])]),t._v(" "),a("h3",{attrs:{id:"量词"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#量词"}},[t._v("#")]),t._v(" 量词")]),t._v(" "),a("blockquote",[a("p",[t._v("量词也称为重复")])]),t._v(" "),a("ol",[a("li",[t._v("简写形式")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("量词")]),t._v(" "),a("th",[t._v("具体含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("{m,}")]),t._v(" "),a("td",[t._v("表示至少出现 m 次。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("{m}")]),t._v(" "),a("td",[t._v("等价于 {m,m}，表示出现 m 次。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("?")]),t._v(" "),a("td",[t._v("等价于 {0,1}，表示出现或者不出现。 记忆方式:问号的意思表示，有吗?")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("+")]),t._v(" "),a("td",[t._v("等价于 {1,}，表示出现至少一次。 记忆方式:加号是追加的意思，得先有一个，然后才考虑追加。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("*")]),t._v(" "),a("td",[t._v("等价于 {0,}，表示出现任意次，有可能不出现。 记忆方式:看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。")])])])]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("惰性匹配")])]),t._v(" "),a("blockquote",[a("p",[t._v("量词默认匹配模式是贪婪匹配，尽可能多的匹配。在量词后面加上"),a("code",[t._v("?")]),t._v("可以关闭贪婪匹配模式，尽可能少的匹配")])]),t._v(" "),a("h3",{attrs:{id:"多选分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#多选分支"}},[t._v("#")]),t._v(" 多选分支")]),t._v(" "),a("blockquote",[a("p",[t._v("一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一")])]),t._v(" "),a("p",[a("code",[t._v("/good|nice/")]),t._v('，此正则用来匹配"good"或"nice"字符。使用管道符'),a("code",[t._v("|")]),t._v("分割模式，匹配其中之一")]),t._v(" "),a("blockquote",[a("p",[t._v("分支结构是惰性的，当前面的匹配上了，后面的就不再尝试了")])]),t._v(" "),a("p",[a("code",[t._v("/good|goodbye/")]),t._v('当我们用这个正则匹配"goodbye"时，只会匹配到"good"')]),t._v(" "),a("h3",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),a("blockquote",[a("p",[t._v("掌握字符组和量词就能解决大部分常见的情形")])]),t._v(" "),a("h2",{attrs:{id:"位置匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位置匹配"}},[t._v("#")]),t._v(" 位置匹配")]),t._v(" "),a("h3",{attrs:{id:"位置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#位置"}},[t._v("#")]),t._v(" 位置")]),t._v(" "),a("blockquote",[a("p",[t._v('位置(锚)是相邻字符之间的位置，对于位置的理解，我们可以理解成空字符 ""')])]),t._v(" "),a("p",[t._v('比如 "hello" 字符串等价于如下的形式:')]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"h"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"e"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"l"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"l"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"o"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),t._v("\n")])])]),a("p",[t._v("也等价于:")]),t._v(" "),a("p",[t._v('"hello" == "" + "" + "hello"\n因此，把 '),a("code",[t._v("/^hello$/")]),t._v("写成"),a("code",[t._v("/^^hello$$$/")]),t._v("，是没有任何问题的:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^^hello$$$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n")])])]),a("p",[t._v("甚至可以写成更复杂的:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(?=he)^^he(?=\\w)llo$\\b\\b$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n")])])]),a("p",[t._v("也就是说字符之间的位置，可以写成多个。")]),t._v(" "),a("h3",{attrs:{id:"锚"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#锚"}},[t._v("#")]),t._v(" 锚")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("锚")]),t._v(" "),a("th",[t._v("具体含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("^")]),t._v(" "),a("td",[t._v("匹配行的开头")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("$")]),t._v(" "),a("td",[t._v("匹配行的结尾（从结尾开始匹配）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\b")]),t._v(" "),a("td",[t._v("匹配单词的边界（就是\\w和\\W之间的位置，包括 \\w 与 ^ 之间的位置，和 \\w 与 $ 之间的位置）")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\B")]),t._v(" "),a("td",[t._v("匹配非单词的边界")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("(?=模式)")]),t._v(" "),a("td",[t._v("匹配模式之前的位置")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("(?!模式)")]),t._v(" "),a("td",[t._v("匹配不是这个模式之前的位置")])])])]),t._v(" "),a("h2",{attrs:{id:"括号的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#括号的作用"}},[t._v("#")]),t._v(" 括号的作用")]),t._v(" "),a("h3",{attrs:{id:"分组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[t._v("#")]),t._v(" 分组")]),t._v(" "),a("blockquote",[a("p",[t._v('/a+/ 匹配连续出现的 "a"，而要匹配连续出现的 "ab" 时，需要使用 /(ab)+/')]),t._v(" "),a("p",[t._v('其中括号是提供分组功能，使量词 + 作用于 "ab" 这个整体')])]),t._v(" "),a("h3",{attrs:{id:"分支结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支结构"}},[t._v("#")]),t._v(" 分支结构")]),t._v(" "),a("blockquote",[a("p",[t._v("在多选分支结构 (p1|p2) 中，此处括号的作用也是不言而喻的，提供了分支表达式的所有可能")])]),t._v(" "),a("h3",{attrs:{id:"分组引用-捕获括号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分组引用-捕获括号"}},[t._v("#")]),t._v(" 分组引用(捕获括号)")]),t._v(" "),a("blockquote",[a("p",[t._v("当模式被放入括号内，匹配的到结果会被捕获，我们可以使用环境提供的API来引用它们")]),t._v(" "),a("p",[t._v("可以使用构造函数的静态属性来引用，"),a("code",[t._v("RegExp.$1至$9")]),t._v("，$num，代表最近匹配上的第几个捕获组")])]),t._v(" "),a("h3",{attrs:{id:"反向引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#反向引用"}},[t._v("#")]),t._v(" 反向引用")]),t._v(" "),a("blockquote",[a("p",[t._v("在正则本身里也可以引用分组。引用之前的分组中匹配到的结果。使用"),a("code",[t._v("\\1至\\9")])])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("\\10")]),t._v("代表什么呢？")])]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("\\10")]),t._v("代表引用第十个分组匹配结果，而不是\\1和0，如果想匹配\\1和0，可以使用"),a("code",[t._v("(?:\\1)0")]),t._v("或者"),a("code",[t._v("\\1(?:0)")])])]),t._v(" "),a("ul",[a("li",[t._v("括号嵌套怎么办？")])]),t._v(" "),a("blockquote",[a("p",[t._v("从外向里，开始匹配分组，最外面的括号为"),a("code",[t._v("$1")]),t._v("，最里面的括号为"),a("code",[t._v("$maxNum")]),t._v("。例如：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^((\\d)(\\d(\\d)))\\1\\2\\3\\4$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1231231233"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" RegExp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 123")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" RegExp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" RegExp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 23")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" RegExp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3")]),t._v("\n")])])]),a("ul",[a("li",[t._v("引用不存在的分组呢？")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果引用不存在的分组，正则不会报错，只是匹配反向引用的字符本身。")]),t._v(" "),a("p",[t._v('例如 \\2，就匹配 "\\2"。注意 "\\2" 表示对 "2" 进行了转义')])]),t._v(" "),a("ul",[a("li",[t._v("分组后面有量词会怎样?")])]),t._v(" "),a("blockquote",[a("p",[t._v("分组后面有量词的话，分组最终捕获到的数据是最后一次的匹配")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" regex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(\\d)+ \\1/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12345 1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => false")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" regex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12345 5"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n")])])]),a("h3",{attrs:{id:"非捕获括号"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非捕获括号"}},[t._v("#")]),t._v(" 非捕获括号")]),t._v(" "),a("blockquote",[a("p",[t._v("括号中匹配到的内容都会被捕获，如果只是想要括号最原始的功能，而不需要去引用它。可以使用非捕获括号：")]),t._v(" "),a("p",[t._v("(?:模式)")])])])}),[],!1,null,null,null);s.default=n.exports}}]);