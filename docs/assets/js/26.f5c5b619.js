(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{404:function(t,e,s){"use strict";s.r(e);var a=s(11),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"react渲染流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react渲染流程"}},[t._v("#")]),t._v(" React渲染流程")]),t._v(" "),s("p",[t._v("想要知道 "),s("code",[t._v("React")]),t._v(" 的内部运行机制，实际上就是要探索 "),s("code",[t._v("React")]),t._v(" 如何将组件映射屏幕，以及组件中的状态发生了变化之后 "),s("code",[t._v("React")]),t._v(" 如何将这些「变化」更新到屏幕上。")]),t._v(" "),s("h2",{attrs:{id:"react-渲染流程图解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-渲染流程图解"}},[t._v("#")]),t._v(" React 渲染流程图解")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/lei451927/picture/raw/master/2021-5-1/1619879843033-image.png",alt:"image"}})]),t._v(" "),s("p",[t._v("对于首次渲染，"),s("code",[t._v("React")]),t._v(" 的主要工作就是将 "),s("code",[t._v("React.render")]),t._v(" 接收到的 "),s("code",[t._v("VNode")]),t._v(" 转化 "),s("code",[t._v("Fiber")]),t._v(" 树，并根据 "),s("code",[t._v("Fiber")]),t._v(" 树的层级关系，构建生成出 "),s("code",[t._v("DOM")]),t._v(" 树并渲染至屏幕中。")]),t._v(" "),s("p",[t._v("而对于更新渲染时，"),s("code",[t._v("Fiber")]),t._v(" 树已经存在于内存中了，所以 "),s("code",[t._v("React")]),t._v(" 更关心的是计算出 "),s("code",[t._v("Fiber")]),t._v(" 树中的各个节点的差异，并将变化更新到屏幕中。")]),t._v(" "),s("h2",{attrs:{id:"react-中的基础概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#react-中的基础概念"}},[t._v("#")]),t._v(" React 中的基础概念")]),t._v(" "),s("p",[t._v("在进行流程解读之前，有一些关于 "),s("code",[t._v("React")]),t._v(" 源码中的概念需要先了解一下。")]),t._v(" "),s("h3",{attrs:{id:"两个阶段"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#两个阶段"}},[t._v("#")]),t._v(" 两个阶段")]),t._v(" "),s("p",[t._v("为了实现 "),s("code",[t._v("concurrent")]),t._v(" 模式，"),s("code",[t._v("React")]),t._v(" 将渲染更新的过程分为了两个阶段：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("render")]),t._v(" 阶段，利用双缓冲技术，在内存中构造另一颗 "),s("code",[t._v("Fiber")]),t._v(" 树，在其上进行协调计算，找到需要更新的节点并记录，这个过程会被重复中断恢复执行。")]),t._v(" "),s("li",[s("code",[t._v("commit")]),t._v(" 阶段，根据 "),s("code",[t._v("render")]),t._v(" 阶段的计算结果，执行更新操作，这个过程是同步执行的。")])]),t._v(" "),s("h3",{attrs:{id:"vnode-元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vnode-元素"}},[t._v("#")]),t._v(" VNode(元素)")]),t._v(" "),s("p",[s("code",[t._v("JSX")]),t._v(" 会被编译转换成 "),s("code",[t._v("React.createElement")]),t._v(" 函数的调用，其返回值就是 "),s("code",[t._v("VNode")]),t._v("，"),s("code",[t._v("虚拟DOM")]),t._v(" 节点的描述对象。")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("React")]),t._v(" 源码中称之为 "),s("code",[t._v("element")]),t._v("，为了避免和 "),s("code",[t._v("DOM元素")]),t._v(" 的冲突，这里我就用大家比较熟悉的 "),s("code",[t._v("虚拟DOM")]),t._v(" 来称呼了。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DOM节点名称或类组件、函数组件")]),t._v("\n  type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" App"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  ref"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  key"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  props"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"fiber"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fiber"}},[t._v("#")]),t._v(" Fiber")]),t._v(" "),s("p",[t._v("Fiber有两层含义：程序架构、数据结构")]),t._v(" "),s("p",[t._v("从程序架构的角度来看，为了实现 "),s("code",[t._v("concurrent")]),t._v(" 模式，需要程序具备的可中断、可恢复的特性， 而之前 "),s("code",[t._v("VNode")]),t._v(" 的树型结构很难完成这些操作，所以 "),s("code",[t._v("Fiber")]),t._v(" 就应运而生了。")]),t._v(" "),s("p",[t._v("那 "),s("code",[t._v("Fiber")]),t._v(" 究竟是如何实现可中断、可恢复的呢？这就要说说 "),s("code",[t._v("Fiber")]),t._v("的具体数据结构了。")]),t._v(" "),s("p",[s("code",[t._v("Fiber")]),t._v(" 是一个链表结构，通过"),s("code",[t._v("child")]),t._v("、"),s("code",[t._v("sibling")]),t._v("、"),s("code",[t._v("return")]),t._v("三个属性记录了树型结构中的子节点、兄弟节点、父节点的关系信息，从而可以实现从任一节点出发，都可以访问其他节点的特性。")]),t._v(" "),s("p",[t._v("除了作为链表的结构之外，程序运行时还需要记录组件的各种状态、实例、真实DOM元素映射等等信息，这些都会被记录在 "),s("code",[t._v("Fiber")]),t._v(" 这个对象身上。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FiberNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elementType "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pendingProps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pendingProps\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedProps "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dependencies "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mode\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("effectTag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoEffect\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expirationTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoWork\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childExpirationTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoWork\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"return、child、sibling"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#return、child、sibling"}},[t._v("#")]),t._v(" return、child、sibling")]),t._v(" "),s("p",[t._v("这三个属性主要用途是将每个 Fiber 节点连接起来，用链表的结构来描述树型结构的关系。")]),t._v(" "),s("ul",[s("li",[t._v("child：指向第一个子节点")]),t._v(" "),s("li",[t._v("sibling：指向第一个兄弟节点")]),t._v(" "),s("li",[t._v("return：指向父节点")])]),t._v(" "),s("h4",{attrs:{id:"effecttag（flags）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#effecttag（flags）"}},[t._v("#")]),t._v(" effectTag（flags）")]),t._v(" "),s("p",[t._v("副作用标记，标识了此 "),s("code",[t._v("Fiber")]),t._v("节点需要进行哪些操作，默认为 "),s("code",[t._v("NoEffect")]),t._v("。")]),t._v(" "),s("p",[t._v("标记了 "),s("code",[t._v("NoEffect")]),t._v("、"),s("code",[t._v("PerformedWork")]),t._v(" 的节点在更新过程中会被跳过。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 源码位置：packages/shared/ReactSideEffectTags.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作为 EffectTag 的初始值，或者用于 EffectTag 的比较判断，其值为 0 表示没有副作用，也就是不涉 及更新")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" NoEffect "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b000000000000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 由 React devtools 读取， NoEffect 和 PerformedWork 都不会被 commit，当创建 Effect List时，会跳过NoEffect 和 PerformedWork")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" PerformedWork "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b000000000001")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示向树中插入新的子节点，对应的状态为 MOUNTING，当执行 commitPlacement 函数完成插入后， 清除该标志位")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Placement "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b000000000010")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示当 props、state、context 发生变化或者 forceUpdate 时，会标记为 Update ，检查到标记后，执行 mmitUpdate 函数进行属性更新，与其相关的生命周期函数为 componentDidMount 和 componentDidUpdate")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Update "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b000000000100")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" PlacementAndUpdate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b000000000110")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 标记将要卸载的结点，检查到标记后，执行 commitDeletion 函数对组件进行卸载，在节点树中删除对应对 节点，与其相关的生命周期函数为 componentWillUnmount")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Deletion "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b000000001000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ContentReset "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b000000010000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Callback "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b000000100000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" DidCapture "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b000001000000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b000010000000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Snapshot "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b000100000000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Passive "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b001000000000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" LifecycleEffectMask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b001110100100")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" HostEffectMask "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b001111111111")]),t._v("\n")])])]),s("h4",{attrs:{id:"nexteffect、firsteffect、lasteffect"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nexteffect、firsteffect、lasteffect"}},[t._v("#")]),t._v(" nextEffect、firstEffect、lastEffect")]),t._v(" "),s("p",[t._v("链表结构，保存了需要更新的后代节点，每个 "),s("code",[t._v("Fiber")]),t._v(" 节点处理完自身后都会根据相应逻辑与父节点的 "),s("code",[t._v("lastEffect")]),t._v(" 进行连接。")]),t._v(" "),s("p",[t._v("这样在 "),s("code",[t._v("commit")]),t._v(" 阶段，只需要从根节点的 "),s("code",[t._v("firstEffect")]),t._v(" 向下遍历，就可以将所有需要更新的节点进行相应处理了。")]),t._v(" "),s("h4",{attrs:{id:"updatequeue"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#updatequeue"}},[t._v("#")]),t._v(" updateQueue")]),t._v(" "),s("p",[t._v("保存了同一事件循环中对组件的多次更新操作（多次调用 "),s("code",[t._v("setState")]),t._v(" ）")]),t._v(" "),s("h4",{attrs:{id:"tag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tag"}},[t._v("#")]),t._v(" tag")]),t._v(" "),s("p",[s("code",[t._v("tag")]),t._v(" 描述了 "),s("code",[t._v("Fiber")]),t._v(" 节点的类型")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 源码位置:packages/shared/ReactWorkTags.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" FunctionComponent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 函数组件元素对应的 Fiber 结点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ClassComponent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Class组件元素对应的 Fiber 结点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" IndeterminateComponent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在不确定是 Class 组件元素还是函数组件元素时的取值 export const HostRoot = 3; // 对应 Fiber 树的根结点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" HostPortal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对应一颗子树，可以另一个渲染器的入口")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" HostComponent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 宿主组件元素(如div，button等)对应的 Fiber 结点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" HostText "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 文本元素(如div，button等)对应的 Fiber 结点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Fragment "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v("\n")])])]),s("h4",{attrs:{id:"statenode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#statenode"}},[t._v("#")]),t._v(" stateNode")]),t._v(" "),s("p",[s("code",[t._v("Fiber")]),t._v(" 节点的 "),s("code",[t._v("stateNode")]),t._v(" 属性存储的当前节点的最终产物")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("ClassComponent")]),t._v(" 类型的节点则该属性指向的是当前 "),s("code",[t._v("Class")]),t._v(" 组件的实例")]),t._v(" "),s("li",[s("code",[t._v("HostComponent")]),t._v(" 类型的节点则该属性指向的是当前节点的 "),s("code",[t._v("DOM")]),t._v(" 实例")]),t._v(" "),s("li",[s("code",[t._v("HostRoot")]),t._v(" 类型的节点则该属性指向的是 "),s("code",[t._v("fiberRoot")]),t._v(" 对象")])]),t._v(" "),s("h3",{attrs:{id:"fiberrootnode"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fiberrootnode"}},[t._v("#")]),t._v(" FiberRootNode")]),t._v(" "),s("p",[s("code",[t._v("fiberRoot")]),t._v(" 对象是整个 "),s("code",[t._v("Fiber架构")]),t._v(" 的入口对象，其上记录了应用程序运行过程中需要保存的关键信息。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("FiberRootNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("containerInfo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hydrate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// current树")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 包含容器")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("containerInfo "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" containerInfo\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pendingChildren "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pingCache "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("finishedExpirationTime "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoWork\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 存储工作循环(workLoop)结束后的副作用列表，用于commit阶段")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("finishedWork "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timeoutHandle "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" noTimeout\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("context "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pendingContext "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hydrate "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hydrate\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstBatch "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[s("code",[t._v("containerInfo")]),t._v(" 保存了 "),s("code",[t._v("React.render")]),t._v(" 函数第二个参数，也就是程序的真实 "),s("code",[t._v("DOM")]),t._v(" 容器。")]),t._v(" "),s("p",[s("code",[t._v("current")]),t._v(" 属性既是应用程序中 "),s("code",[t._v("Fiber树")]),t._v(" 的入口。")]),t._v(" "),s("p",[s("code",[t._v("current")]),t._v(" 的值是一个 "),s("code",[t._v("HostRoot")]),t._v(" 类型的 "),s("code",[t._v("Fiber")]),t._v(" 节点，这个 "),s("code",[t._v("HostRoot")]),t._v(" 的子节点就是程序的根组件（"),s("code",[t._v("App")]),t._v("）对应的 "),s("code",[t._v("Fiber")]),t._v(" 节点。")]),t._v(" "),s("p",[t._v("在首次渲染调用 "),s("code",[t._v("React.render")]),t._v(" 时，应用程序中其实只有一个 "),s("code",[t._v("HostRoot")]),t._v(" 的 "),s("code",[t._v("Fiber")]),t._v(" 节点，而在 "),s("code",[t._v("render")]),t._v(" 过程中，才会将我们传入的 "),s("code",[t._v("App")]),t._v(" 组件构建成 "),s("code",[t._v("HostRoot")]),t._v(" 的子 "),s("code",[t._v("Fiber")]),t._v(" 节点。")]),t._v(" "),s("h3",{attrs:{id:"双缓冲"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双缓冲"}},[t._v("#")]),t._v(" 双缓冲")]),t._v(" "),s("p",[t._v("双缓冲是指将需要变化的部分，先在内存中计算改变，计算完成后一次性展示给用户，这样用户就不会感知到明显的计算变化。离屏 "),s("code",[t._v("Canvas")]),t._v(" 就是双缓冲的思想。")]),t._v(" "),s("p",[t._v("对于 "),s("code",[t._v("Concurrent")]),t._v(" 模式来说，更新计算的过程会被频繁中断，如果不使用缓冲技术，那用户就会感知到明显的中断变化。")]),t._v(" "),s("p",[t._v("每个 "),s("code",[t._v("Fiber")]),t._v(" 节点的 "),s("code",[t._v("alternate")]),t._v(" 属性会指向另一个 "),s("code",[t._v("Fiber")]),t._v(" 节点，这个 "),s("code",[t._v("Fiber")]),t._v(" 节点就是「草稿」节点，当需要进行计算时，就会在这个节点上进行。计算完成后将两个节点进行互换，展示给用户。")]),t._v(" "),s("p",[t._v("作为已经计算完成并展示到视图中的 "),s("code",[t._v("Fiber")]),t._v(" 树，在源码中称为 "),s("code",[t._v("current")]),t._v(" 树。\n而 "),s("code",[t._v("current")]),t._v(" 树的 "),s("code",[t._v("alternate")]),t._v(" 指向的另一棵树，就是用来计算变化的，称为 "),s("code",[t._v("WorkInProgress")]),t._v(" 树（ "),s("code",[t._v("WIP")]),t._v(" ）。")]),t._v(" "),s("h3",{attrs:{id:"组件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件"}},[t._v("#")]),t._v(" 组件")]),t._v(" "),s("p",[t._v("函数或者是类，最终产出 "),s("code",[t._v("VNode")]),t._v(" 和定义生命周期钩子。")]),t._v(" "),s("h3",{attrs:{id:"组件实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#组件实例"}},[t._v("#")]),t._v(" 组件实例")]),t._v(" "),s("p",[t._v("类组件实例化后的对象，其上记录了生命周期函数、组件自身状态、响应事件等。对于函数组件来说，没有实例对象，所以在 "),s("code",[t._v("hooks")]),t._v(" 出现之前函数组件不能拥有自己的状态，而在 "),s("code",[t._v("hooks")]),t._v(" 之后，函数组件通过调用 "),s("code",[t._v("hooks")]),t._v(" 的产生状态被记录在组件对应的 "),s("code",[t._v("Fiber")]),t._v(" 对象中。")]),t._v(" "),s("h3",{attrs:{id:"update（更新对象）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update（更新对象）"}},[t._v("#")]),t._v(" update（更新对象）")]),t._v(" "),s("p",[t._v("包含过期时间、更新内容的对象。")]),t._v(" "),s("h3",{attrs:{id:"updatelist（更新队列）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#updatelist（更新队列）"}},[t._v("#")]),t._v(" updateList（更新队列）")]),t._v(" "),s("p",[s("code",[t._v("update")]),t._v(" 的集合，链表结构。"),s("code",[t._v("React")]),t._v(" 的更新操作都是异步执行的，在同一个宏任务中执行的更新操作都会被记录在此处，统一在下一个队列中执行。")]),t._v(" "),s("h2",{attrs:{id:"更新队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新队列"}},[t._v("#")]),t._v(" 更新队列")]),t._v(" "),s("p",[t._v("不管是首次渲染还是更新渲染，都一定会经过以下步骤：")]),t._v(" "),s("ol",[s("li",[t._v("创建更新对象")]),t._v(" "),s("li",[t._v("加入更新队列")]),t._v(" "),s("li",[t._v("遍历合并更新队列获取最终的状态值。")])]),t._v(" "),s("p",[t._v("所以我们先来了解一下什么是更新对象和队列。")]),t._v(" "),s("h3",{attrs:{id:"更新队列的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新队列的作用"}},[t._v("#")]),t._v(" 更新队列的作用")]),t._v(" "),s("p",[t._v("主要是对同步的多次调用 "),s("code",[t._v("setState")]),t._v(" 进行缓冲，避免冗余的渲染调用。")]),t._v(" "),s("h4",{attrs:{id:"多次触发更新（setstate）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多次触发更新（setstate）"}},[t._v("#")]),t._v(" 多次触发更新（setState）")]),t._v(" "),s("p",[t._v("触发更新操作时，"),s("code",[t._v("React")]),t._v(" 会从 "),s("code",[t._v("this")]),t._v("（类组件）或 "),s("code",[t._v("hooks")]),t._v(" 返回的 "),s("code",[t._v("setter")]),t._v(" 函数中找到对应的 "),s("code",[t._v("Fiber")]),t._v(" 节点，然后根据传入 "),s("code",[t._v("setState")]),t._v(" 的参数创建更新对象，并将更新对象保存在 "),s("code",[t._v("Fiber")]),t._v(" 节点的 "),s("code",[t._v("updateQueue")]),t._v(" 中。\n这样我们在同一个事件循环中对组件的多次修改操作就可以记录下来，在下一个事件循环中统一进行处理。处理时就会遍历 "),s("code",[t._v("updateQueue")]),t._v(" 中的修改，依次合并获取最终的 "),s("code",[t._v("state")]),t._v(" 进行渲染。")]),t._v(" "),s("h3",{attrs:{id:"更新对象定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新对象定义"}},[t._v("#")]),t._v(" 更新对象定义")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createUpdate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("expirationTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" suspenseConfig")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" update "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 过期时间与任务优先级相关联")]),t._v("\n    expirationTime"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" expirationTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    suspenseConfig"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" suspenseConfig"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// tag用于标识更新的类型如UpdateState，ReplaceState，ForceUpdate等")]),t._v("\n    tag"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" UpdateState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新内容")]),t._v("\n    payload"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 更新完成后的回调")]),t._v("\n    callback"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下一个更新（任务）")]),t._v("\n    next"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 下一个副作用")]),t._v("\n    nextEffect"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 优先级会根据任务体系中当前任务队列的执行情况而定")]),t._v("\n    update"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("priority "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getCurrentPriorityLevel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" update\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("为了防止某个 "),s("code",[t._v("update")]),t._v(" 因为优先级的问题一直被打断，"),s("code",[t._v("React")]),t._v(" 给每个 "),s("code",[t._v("update")]),t._v(" 都设置了过期时间（"),s("code",[t._v("expirationTime")]),t._v("），当时间到了就会强制执行改 "),s("code",[t._v("update")]),t._v("。")]),t._v(" "),s("p",[s("code",[t._v("expirationTime")]),t._v(" 会根据任务的优先级计算得来")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 源码位置：packages/scheduler/src/Scheduler.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 立即执行（可由饥饿任务转换），最高优先级")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ImmediatePriority "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用户阻塞级别（如外部事件），次高优先级")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" UserBlockingPriority "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 普通优先级")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" NormalPriority "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 低优先级")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" LowPriority "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最低优先级，空闲时去执行")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" IdlePriority "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("简单点说，具有 "),s("code",[t._v("UserBlockingPriority")]),t._v(" 级别的多个更新，如果它们的时间间隔小于10ms，那么它们拥有相同的过期时间。")]),t._v(" "),s("p",[t._v("同样的方式可以推到出具有 "),s("code",[t._v("LowPriority")]),t._v(" 级别的多个更新（一般为异步更新），如果它们的时间间隔小于25ms，那么它们也拥有相同的过期时间。")]),t._v(" "),s("p",[s("code",[t._v("React")]),t._v(" 的过期时间机制保证了短时间内同一个 "),s("code",[t._v("Fiber")]),t._v(" 节点的多个更新拥有相同的过期时间，最终会合并在一起执行。")]),t._v(" "),s("h3",{attrs:{id:"更新队列定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新队列定义"}},[t._v("#")]),t._v(" 更新队列定义")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 源码位置:packages/react-reconciler/src/ReactUpdateQueue.js")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createUpdateQueue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("baseState")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" queue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 当前的state")]),t._v("\n    baseState"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" baseState"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 队列中第一个更新")]),t._v("\n    firstUpdate"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 队列中的最后一个更新 lastUpdate: null,")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 队列中第一个捕获类型的update firstCapturedUpdate: null,")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 队列中第一个捕获类型的update lastCapturedUpdate: null,")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第一个副作用")]),t._v("\n    firstEffect"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 最后一个副作用")]),t._v("\n    lastEffect"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    firstCapturedEffect"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    lastCapturedEffect"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" queue\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"初始渲染流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#初始渲染流程"}},[t._v("#")]),t._v(" 初始渲染流程")]),t._v(" "),s("ol",[s("li",[t._v("根组件的 "),s("code",[t._v("JSX")]),t._v(" 定义会被 "),s("code",[t._v("babel")]),t._v(" 转换为 "),s("code",[t._v("React.createElement")]),t._v(" 的调用，其返回值为 "),s("code",[t._v("VNode树")]),t._v("。")]),t._v(" "),s("li",[s("code",[t._v("React.render")]),t._v(" 调用，实例化 "),s("code",[t._v("FiberRootNode")]),t._v("，并创建 "),s("code",[t._v("根Fiber")]),t._v(" 节点 "),s("code",[t._v("HostRoot")]),t._v(" 赋值给 "),s("code",[t._v("FiberRoot")]),t._v(" 的 "),s("code",[t._v("current")]),t._v(" 属性")]),t._v(" "),s("li",[t._v("创建更新对象，其更新内容为 "),s("code",[t._v("React.render")]),t._v(" 接受到的第一个参数 "),s("code",[t._v("VNode树")]),t._v("，将更新对象添加到 "),s("code",[t._v("HostRoot")]),t._v(" 节点的 "),s("code",[t._v("updateQueue")]),t._v(" 中")]),t._v(" "),s("li",[t._v("处理更新队列，从 "),s("code",[t._v("HostRoot")]),t._v(" 节点开始遍历，在其 "),s("code",[t._v("alternate")]),t._v(" 属性中构建 "),s("code",[t._v("WIP")]),t._v(" 树，在构建 "),s("code",[t._v("Fiber")]),t._v(" 树的过程中会根据 "),s("code",[t._v("VNode")]),t._v(" 的类型进行组件实例化、生命周期调用等工作，对需要操作视图的动作将其保存到 "),s("code",[t._v("Fiber")]),t._v(" 节点的 "),s("code",[t._v("effectTag")]),t._v(" 上面，将需要更新在DOM上的属性保存至 "),s("code",[t._v("updateQueue")]),t._v(" 中，并将其与父节点的 "),s("code",[t._v("lastEffect")]),t._v(" 连接。")]),t._v(" "),s("li",[t._v("当整颗树遍历完成后，进入 "),s("code",[t._v("commit")]),t._v(" 阶段，此阶段就是将 "),s("code",[t._v("effectList")]),t._v(" 收集的 "),s("code",[t._v("DOM")]),t._v(" 操作应用到屏幕上。")]),t._v(" "),s("li",[s("code",[t._v("commit")]),t._v(" 完成将 "),s("code",[t._v("current")]),t._v(" 替换为 "),s("code",[t._v("WIP")]),t._v(" 树。")])]),t._v(" "),s("h3",{attrs:{id:"构建wip树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构建wip树"}},[t._v("#")]),t._v(" 构建WIP树")]),t._v(" "),s("p",[s("code",[t._v("React")]),t._v(" 会先以 "),s("code",[t._v("current")]),t._v(" 这个 "),s("code",[t._v("Fiber")]),t._v(" 节点为基础，创建一个新的 "),s("code",[t._v("Fiber")]),t._v(" 节点并赋值给 "),s("code",[t._v("current.alternate")]),t._v(" 属性，然后在这个 "),s("code",[t._v("alternate")]),t._v(" 节点上进行协调计算，这就是之前所说的 "),s("code",[t._v("WIP")]),t._v(" 树。")]),t._v(" "),s("p",[t._v("协调时会在全局记录一个 "),s("code",[t._v("workInProgress")]),t._v(" 指针，用来保存当前正在处理的节点，这样中断之后就可以在下一个事件循环中接着进行协调。")]),t._v(" "),s("p",[t._v("此时整个更新队列中只有 "),s("code",[t._v("HostRoot")]),t._v(" 这一个 "),s("code",[t._v("Fiber")]),t._v(" 节点，对当前节点处理完成之后，会调用 "),s("code",[t._v("reconcileChildren")]),t._v(" 方法来获取子节点，并对子节点做同样的处理流程。")]),t._v(" "),s("h3",{attrs:{id:"fiber节点处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fiber节点处理"}},[t._v("#")]),t._v(" Fiber节点处理")]),t._v(" "),s("ol",[s("li",[t._v("创建当前节点，并返回子节点")]),t._v(" "),s("li",[t._v("如果子节点为空，则执行叶子节点逻辑")]),t._v(" "),s("li",[t._v("否则，将子节点赋值给 "),s("code",[t._v("workInProgress")]),t._v(" 指针，作为下一个处理的节点。")])]),t._v(" "),s("p",[t._v("这里主要说一下三种主要节点：HostRoot、ClassComponent、HostComponent")]),t._v(" "),s("ul",[s("li",[t._v("HostRoot\n"),s("ul",[s("li",[t._v("对于 "),s("code",[t._v("HostRoot")]),t._v(" 主要是处理其身上的更新队列，获取根组件的元素。")])])]),t._v(" "),s("li",[t._v("ClassComponent\n"),s("ul",[s("li",[t._v("解析完 "),s("code",[t._v("HostRoot")]),t._v(" 后会返回其 "),s("code",[t._v("child")]),t._v(" 节点，一般来说就是 "),s("code",[t._v("ClassComponent")]),t._v(" 了。")]),t._v(" "),s("li",[t._v("这种类型的 "),s("code",[t._v("Fiber")]),t._v(" 节点是需要进行组件实例化的，实例会被保存在 "),s("code",[t._v("Fiber")]),t._v(" 的 "),s("code",[t._v("stateNode")]),t._v(" 属性上。")]),t._v(" "),s("li",[t._v("实例化之后会调用 "),s("code",[t._v("render")]),t._v(" 拿到其 "),s("code",[t._v("VNode")]),t._v(" 再次进行构建过程。")]),t._v(" "),s("li",[t._v("对于数组类型的 "),s("code",[t._v("VNode")]),t._v("，会使用 "),s("code",[t._v("sibling")]),t._v(" 属性将其相连。")])])]),t._v(" "),s("li",[t._v("HostComponent\n"),s("ul",[s("li",[s("code",[t._v("HostComponent")]),t._v(" 就是原生的 "),s("code",[t._v("DOM")]),t._v(" 类型了，会创建 "),s("code",[t._v("DOM")]),t._v(" 对象并保存到 "),s("code",[t._v("stateNode")]),t._v(" 属性上。")])])])]),t._v(" "),s("h4",{attrs:{id:"叶子节点逻辑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#叶子节点逻辑"}},[t._v("#")]),t._v(" 叶子节点逻辑")]),t._v(" "),s("p",[t._v("简单思考一下，叶子节点必然是一个 "),s("code",[t._v("DOM")]),t._v(" 类型的节点，也就是 "),s("code",[t._v("HostComponent")]),t._v("，所以对叶子节点的处理可以理解为将 "),s("code",[t._v("Fiber")]),t._v(" 节点映射为 "),s("code",[t._v("DOM")]),t._v(" 节点的过程。")]),t._v(" "),s("p",[t._v("当碰到叶子节点时，会创建相应的 "),s("code",[t._v("DOM")]),t._v(" 元素，然后将其记录在 "),s("code",[t._v("Fiber")]),t._v(" 的 "),s("code",[t._v("stateNode")]),t._v(" 属性中，然后调用 "),s("code",[t._v("appendAllChildren")]),t._v(" 将子节点创建好的的 "),s("code",[t._v("DOM")]),t._v(" 添加到 "),s("code",[t._v("DOM")]),t._v(" 结构中。")]),t._v(" "),s("p",[t._v("叶子节点处理完毕后")]),t._v(" "),s("ul",[s("li",[t._v("如果其兄弟节点存在，就将 "),s("code",[t._v("workInProgress")]),t._v(" 指针指向其兄弟节点。")]),t._v(" "),s("li",[t._v("否则就将 "),s("code",[t._v("workInProgress")]),t._v(" 指向其父节点。")])]),t._v(" "),s("h3",{attrs:{id:"收集副作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#收集副作用"}},[t._v("#")]),t._v(" 收集副作用")]),t._v(" "),s("p",[t._v("收集副作用的过程中主要有两种情况")]),t._v(" "),s("ol",[s("li",[t._v("第一种情况是将当前节点的副作用链表添加到父节点中\n"),s("ul",[s("li",[s("code",[t._v("returnFiber.lastEffect.nextEffect = workInProgress.firstEffect")])])])]),t._v(" "),s("li",[t._v("第二种情况就是如果当前节点也有副作用标识，则将当前节点连接到父节点的副作用链表中\n"),s("ul",[s("li",[s("code",[t._v("returnFiber.lastEffect.nextEffect = workInProgress")])])])])]),t._v(" "),s("h3",{attrs:{id:"处理副作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#处理副作用"}},[t._v("#")]),t._v(" 处理副作用")]),t._v(" "),s("p",[t._v("从根节点的 "),s("code",[t._v("firstEffect")]),t._v(" 开始向下遍历")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("before mutation")]),t._v("：遍历 "),s("code",[t._v("effectList")]),t._v("，执行生命周期函数 "),s("code",[t._v("getSnapshotBeforeUpdate")]),t._v("，使用 "),s("code",[t._v("scheduleCallback")]),t._v(" 异步调度 "),s("code",[t._v("flushPassiveEffects")]),t._v("方法（ "),s("code",[t._v("useEffect")]),t._v(" 逻辑）")]),t._v(" "),s("li",[s("code",[t._v("mutation")]),t._v("：第二次遍历，根据 "),s("code",[t._v("Fiber")]),t._v(" 节点的 "),s("code",[t._v("effectTag")]),t._v(" 对 "),s("code",[t._v("DOM")]),t._v(" 进行插入、删除、更新等操作；将 "),s("code",[t._v("effectList")]),t._v(" 赋值给 "),s("code",[t._v("rootWithPendingPassiveEffects")])]),t._v(" "),s("li",[s("code",[t._v("layout")]),t._v("：从头再次遍历，执行生命周期函数，如 "),s("code",[t._v("componentDidMount")]),t._v("、"),s("code",[t._v("DidUpdate")]),t._v(" 等，同时会将 "),s("code",[t._v("current")]),t._v(" 替换为 "),s("code",[t._v("WIP")]),t._v(" 树，置空 "),s("code",[t._v("WIP")]),t._v(" 树；"),s("code",[t._v("scheduleCallback")]),t._v(" 触发 "),s("code",[t._v("flushPassiveEffects")]),t._v("，"),s("code",[t._v("flushPassiveEffects")]),t._v(" 内部遍历 "),s("code",[t._v("rootWithPendingPassiveEffects")])])]),t._v(" "),s("h3",{attrs:{id:"渲染完成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#渲染完成"}},[t._v("#")]),t._v(" 渲染完成")]),t._v(" "),s("p",[t._v("至此整个 "),s("code",[t._v("DOM")]),t._v(" 树就被创建并插入到了 "),s("code",[t._v("DOM")]),t._v(" 容器中，整个应用程序也展示到了屏幕上，初次渲染流程结束。")]),t._v(" "),s("h2",{attrs:{id:"更新渲染流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更新渲染流程"}},[t._v("#")]),t._v(" 更新渲染流程")]),t._v(" "),s("ol",[s("li",[t._v("组件调用 "),s("code",[t._v("setState")]),t._v(" 触发更新，"),s("code",[t._v("React")]),t._v(" 通过 "),s("code",[t._v("this")]),t._v(" 找到组件对应的 "),s("code",[t._v("Fiber")]),t._v(" 对象，使用 "),s("code",[t._v("setState")]),t._v(" 的参数创建更新对象，并将其添加进 "),s("code",[t._v("Fiber")]),t._v(" 的更新队列中，然后开启调度流程。")]),t._v(" "),s("li",[t._v("从根 "),s("code",[t._v("Fiber")]),t._v(" 节点开始构建 "),s("code",[t._v("WIP")]),t._v(" 树，此时会重点处理新旧节点的差异点，并尽可能复用旧的 "),s("code",[t._v("Fiber")]),t._v(" 节点。")]),t._v(" "),s("li",[t._v("处理 "),s("code",[t._v("Fiber")]),t._v(" 节点，检查 "),s("code",[t._v("Fiber")]),t._v(" 节点的更新队列是否有值，"),s("code",[t._v("context")]),t._v(" 是否有变化，如果没有则跳过。\n"),s("ul",[s("li",[t._v("处理更新队列，拿到最新的 "),s("code",[t._v("state")]),t._v("，调用 "),s("code",[t._v("shouldComponentUpdate")]),t._v(" 判断是否需要更新。")])])]),t._v(" "),s("li",[t._v("调用 "),s("code",[t._v("render")]),t._v(" 方法获取 "),s("code",[t._v("VNode")]),t._v("，进行 "),s("code",[t._v("diff")]),t._v(" 算法，标记 "),s("code",[t._v("effectTag")]),t._v("，收集到 "),s("code",[t._v("effectList")]),t._v(" 中。\n"),s("ul",[s("li",[t._v("对于新元素，标记插入 "),s("code",[t._v("Placement")])]),t._v(" "),s("li",[t._v("旧 "),s("code",[t._v("DOM")]),t._v(" 元素，判断属性是否发生变化，标记 "),s("code",[t._v("Update")])]),t._v(" "),s("li",[t._v("对于删除的元素，标记删除 "),s("code",[t._v("Deletion")])])])]),t._v(" "),s("li",[t._v("遍历处理 "),s("code",[t._v("effectList")]),t._v("，调用生命周期并更新 "),s("code",[t._v("DOM")]),t._v("。")])]),t._v(" "),s("h2",{attrs:{id:"fiber-diff"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fiber-diff"}},[t._v("#")]),t._v(" Fiber Diff")]),t._v(" "),s("h3",{attrs:{id:"单个节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单个节点"}},[t._v("#")]),t._v(" 单个节点")]),t._v(" "),s("p",[t._v("当 "),s("code",[t._v("key")]),t._v(" 和 "),s("code",[t._v("type")]),t._v(" 都相同时，会复用之前的 "),s("code",[t._v("Fiber")]),t._v(" 节点，否则则会新建并将旧节点标记删除。")]),t._v(" "),s("h3",{attrs:{id:"多个节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#多个节点"}},[t._v("#")]),t._v(" 多个节点")]),t._v(" "),s("h2",{attrs:{id:"任务与调度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任务与调度"}},[t._v("#")]),t._v(" 任务与调度")]),t._v(" "),s("h3",{attrs:{id:"时间切片"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#时间切片"}},[t._v("#")]),t._v(" 时间切片")]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("Concurrent")]),t._v(" 模式下，任务以 "),s("code",[t._v("Fiber")]),t._v(" 为单位进行执行，当 "),s("code",[t._v("Fiber")]),t._v(" 处理完成，或者 "),s("code",[t._v("shouldYield")]),t._v(" 返回值为 "),s("code",[t._v("true")]),t._v(" 时，就会暂停执行，让出线程。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldYield")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("在 "),s("code",[t._v("shouldYield")]),t._v(" 中会判断当前时间与当前切片的过期时间，如果过期了，就会返回 "),s("code",[t._v("true")]),t._v("，而当前时间的过期时间则是根据不同的优先级进行计算得来。")]),t._v(" "),s("h4",{attrs:{id:"与浏览器通信-messagechannel"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#与浏览器通信-messagechannel"}},[t._v("#")]),t._v(" 与浏览器通信 - MessageChannel")]),t._v(" "),s("p",[t._v("对于浏览器而言，如果我们想要让出js线程，那就是只能把当前的宏任务执行完成。等到下一个宏任务中再接着执行。当浏览器执行完一个宏任务后就会切换只渲染进程进行视图的渲染工作。MessageChannel可以创建一个宏任务，其优先级比setTimeout(0)高。")]),t._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://www.imooc.com/read/86",target:"_blank",rel:"noopener noreferrer"}},[t._v("剖析 React 内部运行机制"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://react.iamkasong.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("React 技术揭秘"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);