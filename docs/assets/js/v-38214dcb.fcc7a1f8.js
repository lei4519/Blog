"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[179],{6803:(n,s,t)=>{t.r(s),t.d(s,{default:()=>o});const a=(0,t(6252).uE)('<h1 id="正则" tabindex="-1"><a class="header-anchor" href="#正则" aria-hidden="true">#</a> 正则</h1><p>##字符匹配</p><h3 id="模糊匹配" tabindex="-1"><a class="header-anchor" href="#模糊匹配" aria-hidden="true">#</a> 模糊匹配</h3><ol><li><p>横向模糊匹配</p><blockquote><p>匹配的字符串长度不是固定的，使用量词实现</p></blockquote></li><li><p>纵向模糊匹配</p><blockquote><p>匹配的字符不是确定的，使用字符组实现</p></blockquote></li></ol><p>###字符组</p><blockquote><p>[abc]，表示匹配一个字符，它可以是 &quot;a&quot;、&quot;b&quot;、&quot;c&quot; 之一</p></blockquote><ol><li><p>范围表示法</p><blockquote><p><code>[a-z0-9]</code>: 匹配a到z，0到9的字符</p></blockquote></li><li><p>排除字符组</p><blockquote><p>使用<code>^</code>表示求反，<code>[^a-z]</code>匹配除了a到z的字符</p></blockquote></li><li><p>简写形式</p></li></ol><table><thead><tr><th style="text-align:center;">字符组</th><th style="text-align:left;">具体含义</th></tr></thead><tbody><tr><td style="text-align:center;">\\d</td><td style="text-align:left;">表示 <code>[0-9]</code>。表示是一位数字。 记忆方式:其英文是 digit(数字)。</td></tr><tr><td style="text-align:center;">\\D</td><td style="text-align:left;">表示 <code>[^0-9]</code>。表示除数字外的任意字符。</td></tr><tr><td style="text-align:center;">\\w</td><td style="text-align:left;">表示 <code>[0-9a-zA-Z_]</code>。表示数字、大小写字母和下划线。 记忆方式:w 是 word 的简写，也称单词字符。</td></tr><tr><td style="text-align:center;">\\W</td><td style="text-align:left;">表示 <code>[^0-9a-zA-Z_]</code>。非单词字符。</td></tr><tr><td style="text-align:center;">\\s</td><td style="text-align:left;">表示 <code>[ \\t\\v\\n\\r\\f]</code>。表示空白符，包括空格、水平制表符、垂直制表符、换行符、回车符、换页 符。 记忆方式:s 是 space 的首字母，空白符的单词是 white space。</td></tr><tr><td style="text-align:center;">\\S</td><td style="text-align:left;">表示 <code>[^ \\t\\v\\n\\r\\f]</code>。 非空白符。</td></tr><tr><td style="text-align:center;">.</td><td style="text-align:left;">表示 <code>[^\\n\\r\\u2028\\u2029]</code>。通配符，表示几乎任意字符。换行符、回车符、行分隔符和段分隔符 除外。 记忆方式:想想省略号 ... 中的每个点，都可以理解成占位符，表示任何类似的东西。</td></tr></tbody></table><h3 id="量词" tabindex="-1"><a class="header-anchor" href="#量词" aria-hidden="true">#</a> 量词</h3><blockquote><p>量词也称为重复</p></blockquote><ol><li>简写形式</li></ol><table><thead><tr><th style="text-align:center;">量词</th><th>具体含义</th></tr></thead><tbody><tr><td style="text-align:center;">{m,}</td><td>表示至少出现 m 次。</td></tr><tr><td style="text-align:center;">{m}</td><td>等价于 {m,m}，表示出现 m 次。</td></tr><tr><td style="text-align:center;">?</td><td>等价于 {0,1}，表示出现或者不出现。 记忆方式:问号的意思表示，有吗?</td></tr><tr><td style="text-align:center;">+</td><td>等价于 {1,}，表示出现至少一次。 记忆方式:加号是追加的意思，得先有一个，然后才考虑追加。</td></tr><tr><td style="text-align:center;">*</td><td>等价于 {0,}，表示出现任意次，有可能不出现。 记忆方式:看看天上的星星，可能一颗没有，可能零散有几颗，可能数也数不过来。</td></tr></tbody></table><ol start="2"><li>惰性匹配</li></ol><blockquote><p>量词默认匹配模式是贪婪匹配，尽可能多的匹配。在量词后面加上<code>?</code>可以关闭贪婪匹配模式，尽可能少的匹配</p></blockquote><h3 id="多选分支" tabindex="-1"><a class="header-anchor" href="#多选分支" aria-hidden="true">#</a> 多选分支</h3><blockquote><p>一个模式可以实现横向和纵向模糊匹配。而多选分支可以支持多个子模式任选其一</p></blockquote><p><code>/good|nice/</code>，此正则用来匹配&quot;good&quot;或&quot;nice&quot;字符。使用管道符<code>|</code>分割模式，匹配其中之一</p><blockquote><p>分支结构是惰性的，当前面的匹配上了，后面的就不再尝试了</p></blockquote><p><code>/good|goodbye/</code>当我们用这个正则匹配&quot;goodbye&quot;时，只会匹配到&quot;good&quot;</p><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><blockquote><p>掌握字符组和量词就能解决大部分常见的情形</p></blockquote><h2 id="位置匹配" tabindex="-1"><a class="header-anchor" href="#位置匹配" aria-hidden="true">#</a> 位置匹配</h2><h3 id="位置" tabindex="-1"><a class="header-anchor" href="#位置" aria-hidden="true">#</a> 位置</h3><blockquote><p>位置(锚)是相邻字符之间的位置，对于位置的理解，我们可以理解成空字符 &quot;&quot;</p></blockquote><p>比如 &quot;hello&quot; 字符串等价于如下的形式:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&quot;hello&quot;</span> <span class="token operator">==</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;h&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;e&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;l&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;l&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;o&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;&quot;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>也等价于:</p><p>&quot;hello&quot; == &quot;&quot; + &quot;&quot; + &quot;hello&quot; 因此，把 <code>/^hello$/ </code>写成<code> /^^hello$$$/</code>，是没有任何问题的:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^^hello$$$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// =&gt; true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>甚至可以写成更复杂的:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(?=he)^^he(?=\\w)llo$\\b\\b$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// =&gt; true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>也就是说字符之间的位置，可以写成多个。</p><h3 id="锚" tabindex="-1"><a class="header-anchor" href="#锚" aria-hidden="true">#</a> 锚</h3><table><thead><tr><th style="text-align:center;">锚</th><th>具体含义</th></tr></thead><tbody><tr><td style="text-align:center;">^</td><td>匹配行的开头</td></tr><tr><td style="text-align:center;">$</td><td>匹配行的结尾（从结尾开始匹配）</td></tr><tr><td style="text-align:center;">\\b</td><td>匹配单词的边界（就是\\w和\\W之间的位置，包括 \\w 与 ^ 之间的位置，和 \\w 与 $ 之间的位置）</td></tr><tr><td style="text-align:center;">\\B</td><td>匹配非单词的边界</td></tr><tr><td style="text-align:center;">(?=模式)</td><td>匹配模式之前的位置</td></tr><tr><td style="text-align:center;">(?!模式)</td><td>匹配不是这个模式之前的位置</td></tr></tbody></table><h2 id="括号的作用" tabindex="-1"><a class="header-anchor" href="#括号的作用" aria-hidden="true">#</a> 括号的作用</h2><h3 id="分组" tabindex="-1"><a class="header-anchor" href="#分组" aria-hidden="true">#</a> 分组</h3><blockquote><p>/a+/ 匹配连续出现的 &quot;a&quot;，而要匹配连续出现的 &quot;ab&quot; 时，需要使用 /(ab)+/</p><p>其中括号是提供分组功能，使量词 + 作用于 &quot;ab&quot; 这个整体</p></blockquote><h3 id="分支结构" tabindex="-1"><a class="header-anchor" href="#分支结构" aria-hidden="true">#</a> 分支结构</h3><blockquote><p>在多选分支结构 (p1|p2) 中，此处括号的作用也是不言而喻的，提供了分支表达式的所有可能</p></blockquote><h3 id="分组引用-捕获括号" tabindex="-1"><a class="header-anchor" href="#分组引用-捕获括号" aria-hidden="true">#</a> 分组引用(捕获括号)</h3><blockquote><p>当模式被放入括号内，匹配的到结果会被捕获，我们可以使用环境提供的API来引用它们</p><p>可以使用构造函数的静态属性来引用，<code>RegExp.$1至$9</code>，$num，代表最近匹配上的第几个捕获组</p></blockquote><h3 id="反向引用" tabindex="-1"><a class="header-anchor" href="#反向引用" aria-hidden="true">#</a> 反向引用</h3><blockquote><p>在正则本身里也可以引用分组。引用之前的分组中匹配到的结果。使用<code>\\1至\\9</code></p></blockquote><ul><li><code>\\10</code>代表什么呢？</li></ul><blockquote><p><code>\\10</code>代表引用第十个分组匹配结果，而不是\\1和0，如果想匹配\\1和0，可以使用<code>(?:\\1)0</code>或者<code>\\1(?:0)</code></p></blockquote><ul><li>括号嵌套怎么办？</li></ul><blockquote><p>从外向里，开始匹配分组，最外面的括号为<code>$1</code>，最里面的括号为<code>$maxNum</code>。例如：</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^((\\d)(\\d(\\d)))\\1\\2\\3\\4$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> string <span class="token operator">=</span> <span class="token string">&quot;1231231233&quot;</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">3</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 23</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> RegExp<span class="token punctuation">.</span>$<span class="token number">4</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>引用不存在的分组呢？</li></ul><blockquote><p>如果引用不存在的分组，正则不会报错，只是匹配反向引用的字符本身。</p><p>例如 \\2，就匹配 &quot;\\2&quot;。注意 &quot;\\2&quot; 表示对 &quot;2&quot; 进行了转义</p></blockquote><ul><li>分组后面有量词会怎样?</li></ul><blockquote><p>分组后面有量词的话，分组最终捕获到的数据是最后一次的匹配</p></blockquote><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token keyword">var</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\d)+ \\1</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;12345 1&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// =&gt; false</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;12345 5&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// =&gt; true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="非捕获括号" tabindex="-1"><a class="header-anchor" href="#非捕获括号" aria-hidden="true">#</a> 非捕获括号</h3><blockquote><p>括号中匹配到的内容都会被捕获，如果只是想要括号最原始的功能，而不需要去引用它。可以使用非捕获括号：</p><p>(?:模式)</p></blockquote>',55),e={},o=(0,t(3744).Z)(e,[["render",function(n,s){return a}]])},3744:(n,s)=>{s.Z=(n,s)=>{const t=n.__vccOpts||n;for(const[n,a]of s)t[n]=a;return t}},3032:(n,s,t)=>{t.r(s),t.d(s,{data:()=>a});const a={key:"v-38214dcb",path:"/technology/Web/regexp.html",title:"正则",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:3,title:"模糊匹配",slug:"模糊匹配",children:[]},{level:3,title:"量词",slug:"量词",children:[]},{level:3,title:"多选分支",slug:"多选分支",children:[]},{level:3,title:"小结",slug:"小结",children:[]},{level:2,title:"位置匹配",slug:"位置匹配",children:[{level:3,title:"位置",slug:"位置",children:[]},{level:3,title:"锚",slug:"锚",children:[]}]},{level:2,title:"括号的作用",slug:"括号的作用",children:[{level:3,title:"分组",slug:"分组",children:[]},{level:3,title:"分支结构",slug:"分支结构",children:[]},{level:3,title:"分组引用(捕获括号)",slug:"分组引用-捕获括号",children:[]},{level:3,title:"反向引用",slug:"反向引用",children:[]},{level:3,title:"非捕获括号",slug:"非捕获括号",children:[]}]}],filePathRelative:"technology/Web/regexp.md",git:{updatedTime:1614592133e3}}}}]);