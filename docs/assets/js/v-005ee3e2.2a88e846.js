"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[751],{6438:(n,s,a)=>{a.r(s),a.d(s,{default:()=>q});var e=a(6252);const p=(0,e._)("h1",{id:"child-process-spawn模块详解",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#child-process-spawn模块详解","aria-hidden":"true"},"#"),(0,e.Uk)(" child_process spawn模块详解")],-1),l={href:"http://nodejs.cn/api/child_process.html#child_process_child_process_spawn_command_args_options",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("官方文档"),t=(0,e.uE)('<blockquote><p><code>child_process.spawn()</code> 方法使用给定的 command 衍生新的进程，并传入 args 中的命令行参数。</p></blockquote><h2 id="函数签名" tabindex="-1"><a class="header-anchor" href="#函数签名" aria-hidden="true">#</a> 函数签名</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">SpawnOptions</span> <span class="token punctuation">{</span>\n  cwd<span class="token operator">:</span> <span class="token builtin">string</span>\n  env<span class="token operator">:</span> Object\n  argv0<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n  stdio<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token builtin">string</span>\n  detached<span class="token operator">:</span> <span class="token builtin">boolean</span>\n  uid<span class="token operator">:</span> <span class="token builtin">number</span>\n  gid<span class="token operator">:</span> <span class="token builtin">number</span>\n  serialization<span class="token operator">:</span> <span class="token builtin">string</span>\n  shell<span class="token operator">:</span> <span class="token builtin">boolean</span>\n  windowsVerbatimArguments<span class="token operator">:</span> <span class="token builtin">boolean</span>\n  windowsHide<span class="token operator">:</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">spawn</span><span class="token punctuation">(</span>command<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> options<span class="token operator">:</span> SpawnOptions<span class="token punctuation">)</span><span class="token operator">:</span> ChildProcess<span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">spawn</span><span class="token punctuation">(</span>command<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> args<span class="token operator">:</span> ReadonlyArray<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> options<span class="token operator">:</span> SpawnOptions<span class="token punctuation">)</span><span class="token operator">:</span> ChildProcess<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h2 id="参数详解" tabindex="-1"><a class="header-anchor" href="#参数详解" aria-hidden="true">#</a> 参数详解</h2><h3 id="command" tabindex="-1"><a class="header-anchor" href="#command" aria-hidden="true">#</a> command</h3><p><code>spawn</code>模块会创建一个子进程，并在这个进程中调用传入的系统命令。</p><p>这里的系统命令<code>command</code>就是指你可以在终端中输入的命令，比如<code>npm</code>、<code>node</code>、<code>bash</code>、<code>ls</code>、<code>pwd</code>、<code>mongod</code>等等等等，你可以在终端中输入，就可以在这里传入</p><p>比如我们可以这样调用<code>ls</code>命令</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token punctuation">{</span>spawn<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span>\n<span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="args" tabindex="-1"><a class="header-anchor" href="#args" aria-hidden="true">#</a> args</h3><p>如果需要给命令传递参数，可以传入args属性，此属性默认为空数组</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;-a&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="options" tabindex="-1"><a class="header-anchor" href="#options" aria-hidden="true">#</a> options</h3><p>常用这两个：<code>shell</code> <code>stdio</code></p>',14),c=(0,e._)("li",null,[(0,e.Uk)("shell: boolean | string = false "),(0,e._)("ul",null,[(0,e._)("li",null,"如果为 true，则在 shell 中运行 command。"),(0,e._)("li",null,"在 Unix 上使用 '/bin/sh'，在 Windows 上使用 process.env.ComSpec。"),(0,e._)("li",null,"可以将不同的 shell 指定为字符串。 参见 shell 的要求和默认的 Windows shell")])],-1),i=(0,e.Uk)("stdio: string[] | string = 'pipe' "),r=(0,e.Uk)("默认情况下，子进程的输入输出流都会在子进程中处理，我们可以将其设置为"),u=(0,e._)("code",null,"inherit",-1),d=(0,e.Uk)("，来把子进程的输入输出放到副进程中处理。详见"),k={href:"http://nodejs.cn/api/child_process.html#child_process_options_stdio",target:"_blank",rel:"noopener noreferrer"},b=(0,e.Uk)("options_stdio"),m=(0,e.uE)('<li>举个例子<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>  <span class="token comment">// index.js 文件</span>\n    <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">)</span>\n\n  node index<span class="token punctuation">.</span>js\n  <span class="token comment">// 如果我们直接这样执行代码，那么在终端中我们是看不到任何输出的</span>\n  <span class="token comment">// 这是因为输出信息都传递给了子进程，而子进程并没有打印处理</span>\n  <span class="token comment">// 我们加上下面的代码进行打印</span>\n  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;child_process&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> console<span class="token punctuation">.</span>log<span class="token punctuation">)</span>\n  <span class="token comment">// 此时再执行就可以在终端中看到输出的信息了</span>\n\n  <span class="token comment">// 而如果我们将 stdio 设置为 inherit，则会将输入输出交由父进程处理，子进程不需要监听事件也可以在终端中看到输出的信息了</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li>',1),h=(0,e.uE)("<li>cwd: string <ul><li>设置子进程的工作目录，默认值：当前目录</li></ul></li><li>env: object <ul><li>环境变量的键值对。 默认值: process.env</li></ul></li><li>argv0: string <ul><li>可以通过设置这个参数重写<code>command</code>参数的值，如果没有传入，则会被设置为传入的<code>command</code>值</li></ul></li>",3),g=(0,e.Uk)("detached: boolean "),w=(0,e.Uk)("使子进程独立于其父进程运行, 具体行为取决于平台。详见"),_={href:"http://nodejs.cn/api/child_process.html#child_process_options_detached",target:"_blank",rel:"noopener noreferrer"},v=(0,e.Uk)("options_detached"),f=(0,e.Uk)(" = uid: number"),j=(0,e._)("li",null,"设置进程的用户标识 = gid: number",-1),x=(0,e._)("li",null,"设置进程的群组标识",-1),U=(0,e._)("li",null,[(0,e.Uk)("serialization: string = json "),(0,e._)("ul",null,[(0,e._)("li",null,"指定用于在进程之间发送消息的序列化类型。 可能的值为 'json' 和 'advanced'。")])],-1),y=(0,e._)("li",null,[(0,e.Uk)("windowsVerbatimArguments: boolean "),(0,e._)("ul",null,[(0,e._)("li",null,"在 Windows 上不为参数加上引号或转义。"),(0,e._)("li",null,"在 Unix 上会被忽略。"),(0,e._)("li",null,"如果指定了 shell 并且是 CMD，则自动设为 true。 默认值: false。")])],-1),C=(0,e._)("li",null,[(0,e.Uk)("windowsHide: boolean "),(0,e._)("ul",null,[(0,e._)("li",null,"隐藏子进程的控制台窗口（在 Windows 系统上通常会创建）。 默认值: false。")])],-1),W=(0,e.uE)('<h2 id="跨平台" tabindex="-1"><a class="header-anchor" href="#跨平台" aria-hidden="true">#</a> 跨平台</h2><p>在unix系统中，我们可以这样使用<code>spawn(&#39;npm&#39;)</code>，这场可以正常运行的。但在windows系统中则会报错，这是因为在windows中我们实际执行的是<code>npm.cmd</code>批处理，而在windows上，<code>.cmd</code> <code>.bat</code>批处理需要使用<code>cmd.exe</code>来运行。</p><p>所以我们需要显示的调用cmd：<code>spawn(&#39;cmd&#39;, [&#39;/c&#39;, &#39;npm&#39;])</code>，或者我们可以设置<code>shell</code>参数来隐式调用cmd <code>spawn(&#39;npm&#39;, {shell: true})</code></p><p>虽然在unix中，我们设置<code>shell</code>为true也不妨碍命令的执行，但是这样就会额外产生一个不必要的shell进程。</p><p>所以我们可以这么来写，如果系统是windows则打开<code>shell</code></p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&#39;npm&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  shell<span class="token operator">:</span> process<span class="token punctuation">.</span>platform <span class="token operator">===</span> <span class="token string">&#39;win32&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="执行shell命令" tabindex="-1"><a class="header-anchor" href="#执行shell命令" aria-hidden="true">#</a> 执行shell命令</h2><p>从上面的文章我们可以了解到, 默认情况下，<code>spawn</code>并不会创建一个<code>shell</code>来执行我们传入的命令。</p><p>这个行为使得它比<code>exec</code>函数效率更高，但是有时我们又确实需要执行<code>shell</code>命令，那这个时候我们怎么使用<code>spawn</code>来执行呢？要知道<code>exec</code>函数会缓存输出结果一次性返回给我们，而<code>spawn</code>则是使用流的形式。如果我们的命令数据数据规模较小，那使用exec的确是个不错的选择，但在大多数情况下，使用<code>spawn</code>将会是更合理、更安全的方式</p><p>那么如果使用<code>spawn</code>来执行shell命令呢？</p><ol><li>最简单的，就是设置shell参数</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 设置为true</span>\n<span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&#39;npm run dev&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>shell<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 指定终端</span>\n<span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&#39;npm run dev&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>shell<span class="token operator">:</span> <span class="token string">&#39;bash&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ol start="2"><li>也可以运行指定终端来执行命令</li></ol><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 直接传入shell命令</span>\n<span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&#39;bash&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;npm&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;run&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dev&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token comment">// 通过stdin.write写入命令</span>\n<span class="token keyword">const</span> bash <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span><span class="token string">&#39;bash&#39;</span><span class="token punctuation">)</span>\nbash<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;npm run dev&#39;</span><span class="token punctuation">)</span>\nbash<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div>',14),O={},q=(0,a(3744).Z)(O,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[(0,e._)("a",l,[o,(0,e.Wm)(a)])]),t,(0,e._)("ul",null,[c,(0,e._)("li",null,[i,(0,e._)("ul",null,[(0,e._)("li",null,[r,u,d,(0,e._)("a",k,[b,(0,e.Wm)(a)])]),m])]),h,(0,e._)("li",null,[g,(0,e._)("ul",null,[(0,e._)("li",null,[w,(0,e._)("a",_,[v,(0,e.Wm)(a)]),f]),j,x])]),U,y,C]),W],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},436:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-005ee3e2",path:"/technology/Node/child_process-spawn.html",title:"child_process spawn模块详解",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"函数签名",slug:"函数签名",children:[]},{level:2,title:"参数详解",slug:"参数详解",children:[{level:3,title:"command",slug:"command",children:[]},{level:3,title:"args",slug:"args",children:[]},{level:3,title:"options",slug:"options",children:[]}]},{level:2,title:"跨平台",slug:"跨平台",children:[]},{level:2,title:"执行shell命令",slug:"执行shell命令",children:[]}],filePathRelative:"technology/Node/child_process-spawn.md",git:{updatedTime:1592231182e3}}}}]);