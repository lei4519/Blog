"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[97],{8555:(a,n,e)=>{e.r(n),e.d(n,{default:()=>S});var s=e(6252);const t=(0,s.uE)('<h1 id="模块联邦微前端思考" tabindex="-1"><a class="header-anchor" href="#模块联邦微前端思考" aria-hidden="true">#</a> 模块联邦微前端思考</h1><h2 id="前置-模块联邦实现思路" tabindex="-1"><a class="header-anchor" href="#前置-模块联邦实现思路" aria-hidden="true">#</a> 前置 - 模块联邦实现思路</h2><p><img src="https://github.com/lei4519/picture-bed/raw/main/images/20211231151855.png" alt=""></p><h3 id="如何复用" tabindex="-1"><a class="header-anchor" href="#如何复用" aria-hidden="true">#</a> 如何复用？</h3><p>React</p><ul><li>16.1.0</li><li>16.1.5</li><li>16.2.0</li></ul>',6),l={id:"语义化版本",tabindex:"-1"},p=(0,s._)("a",{class:"header-anchor",href:"#语义化版本","aria-hidden":"true"},"#",-1),i=(0,s.Uk)(),r={href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"},c=(0,s.Uk)("语义化版本"),o=(0,s.uE)('<p><code>X.Y.Z</code> (16.1.0)</p><ul><li><code>X</code>：做了不兼容的 API 修改</li><li><code>Y</code>：做了向下兼容的功能性新增</li><li><code>Z</code>：做了向下兼容的问题修正</li></ul><hr><ul><li><code>X.Y.Z</code>: 指定版本，严格匹配（<code>16.1.0</code>）</li><li><code>~X.Y.Z</code>: 接受 <code>Z</code> 的最新版本（<code>16.1.0</code>、<code>16.1.9</code>、<code>16.1.99</code>）</li><li><code>^X.Y.Z</code>: 接受 <code>Y.Z</code> 的最新版本（<code>16.1.0</code>、<code>16.9.9</code>、<code>16.99.99</code>）</li><li><code>*</code>: 接受最新版本</li></ul><p>模块联邦实现了运行时的语义化版本管理，在指定的范围内尽量用高的版本</p><hr><p><img src="https://github.com/lei4519/picture-bed/raw/main/images/20211231152347.png" alt=""></p><p>模块联邦</p><ul><li>高级的模块加载方式，可以跨项目进行模块复用，通过运行时的语义化版本管理实现生产依赖共享复用。</li></ul><p>资源复用 &amp; 资源隔离</p><p>模块联邦 &amp;（iframe、qiankun、MicroApp..）</p><h2 id="常见微前端观点" tabindex="-1"><a class="header-anchor" href="#常见微前端观点" aria-hidden="true">#</a> 常见微前端观点</h2><p>独立运行 | 独立开发 | 独立升级 | 独立部署</p><p>尽量避免各个模块间的耦合关系，保持独立。</p><ul><li>模块：微前端中的各个子模块（应用）</li></ul>',15),d={id:"https-micro-frontends-org",tabindex:"-1"},u=(0,s._)("a",{class:"header-anchor",href:"#https-micro-frontends-org","aria-hidden":"true"},"#",-1),h=(0,s.Uk)(),b={href:"https://micro-frontends.org/",target:"_blank",rel:"noopener noreferrer"},m=(0,s.Uk)("https://micro-frontends.org/"),k=(0,s._)("p",null,[(0,s._)("img",{src:"https://github.com/lei4519/picture-bed/raw/main/images/20211230103907.png",alt:""})],-1),g={id:"qiankun-微前端-快问快答",tabindex:"-1"},f=(0,s._)("a",{class:"header-anchor",href:"#qiankun-微前端-快问快答","aria-hidden":"true"},"#",-1),v=(0,s.Uk)(),x={href:"https://zhuanlan.zhihu.com/p/451425684",target:"_blank",rel:"noopener noreferrer"},y=(0,s.Uk)("qiankun(微前端)快问快答"),w=(0,s.uE)('<blockquote><p>Q: 你所了解的微前端子模块一般都是如何划分的？有什么建议？</p><p>A: 我的 PPT 里有一页其实提到了，微前端拆分其实需要有明确的服务边界划分。如果你的微应用之间存在了过多的交互或者耦合，那你可能就要考虑是不是拆分的粒度过细了。</p><p>有一个简单的判断方式，就是看你的 <strong>微应用在独立打开的情况下，是否能完成一个独立 功能/服务 的提交</strong>，如果不是的，那可能就要看看了。</p></blockquote><h2 id="模块联邦概念" tabindex="-1"><a class="header-anchor" href="#模块联邦概念" aria-hidden="true">#</a> 模块联邦概念</h2><p>模块联邦完全相反，其功能就是模块间共享依赖，让模块与模块之间可以相互调用。</p><p>会有什么问题？</p><p>简单说：耦合越多，独立运行、独立开发、独立升级、独立部署 就越难完成（）</p><p>模块联邦：依赖共享，跨模块调用，会有什么问题？</p><ul><li><p>依赖版本冲突风险示例 <img src="https://github.com/lei4519/picture-bed/raw/main/images/20211231143651.png" alt=""><img src="https://github.com/lei4519/picture-bed/raw/main/images/20211229163038.png" alt=""></p></li><li><p>远程模块冲突风险示例</p></li></ul><p><img src="https://github.com/lei4519/picture-bed/raw/main/images/20211231163958.png" alt=""></p><p>模块提供方，不能假设使用方是完全按照规矩去使用模块的。</p><p>具有调用关系（输入输出）的多项目共享模块，必须进行版本控制（npm 包）</p><h2 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h2><hr><h2 id="趋势" tabindex="-1"><a class="header-anchor" href="#趋势" aria-hidden="true">#</a> 趋势</h2><h4 id="前端-组件化-✅" tabindex="-1"><a class="header-anchor" href="#前端-组件化-✅" aria-hidden="true">#</a> 前端 - 组件化 ✅</h4><h4 id="后端-微服务化-✅" tabindex="-1"><a class="header-anchor" href="#后端-微服务化-✅" aria-hidden="true">#</a> 后端 - 微服务化 ✅</h4><h4 id="微前端化-❓" tabindex="-1"><a class="header-anchor" href="#微前端化-❓" aria-hidden="true">#</a> 微前端化 ❓</h4><hr><h2 id="服务器" tabindex="-1"><a class="header-anchor" href="#服务器" aria-hidden="true">#</a> 服务器</h2><p>调用</p><ul><li>独立运行环境</li><li>资源本地存储</li></ul><p><img src="https://github.com/lei4519/picture-bed/raw/main/images/20211228142826.png" alt="server"></p><h2 id="浏览器" tabindex="-1"><a class="header-anchor" href="#浏览器" aria-hidden="true">#</a> 浏览器</h2><p>资源（css/js）加载、组合(共享)、执行</p><ul><li>共用执行环境</li><li>资源加载 <img src="https://github.com/lei4519/picture-bed/raw/main/images/20211228143200.png" alt="client"></li></ul><h2 id="共用执行环境" tabindex="-1"><a class="header-anchor" href="#共用执行环境" aria-hidden="true">#</a> 共用执行环境</h2><h3 id="js-冲突" tabindex="-1"><a class="header-anchor" href="#js-冲突" aria-hidden="true">#</a> JS 冲突</h3><ul><li>全局 API 冲突</li><li>依赖库版本冲突</li></ul><p><img src="https://github.com/lei4519/picture-bed/raw/main/images/20211228144955.png" alt="global api"></p><h3 id="css-冲突" tabindex="-1"><a class="header-anchor" href="#css-冲突" aria-hidden="true">#</a> CSS 冲突</h3><p>公用类名、tailwind</p><ul><li><code>clearfix</code>、<code>mt-8</code>、<code>ellipsis</code></li></ul><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token comment">/* A */</span>\n<span class="token selector">.inactive</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">/* B */</span>\n<span class="token selector">.inactive</span> <span class="token punctuation">{</span>\n  <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token selector">:global</span> <span class="token punctuation">{</span>\n  <span class="token selector">.ant-menu .ant-menu-item-selected</span> <span class="token punctuation">{</span>\n    <span class="token property">border-right</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n    <span class="token property">border-left</span><span class="token punctuation">:</span> 3px solid<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token selector">.ant-menu-inline .ant-menu-item::after</span> <span class="token punctuation">{</span>\n    <span class="token property">border-right</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="难以排查、复现" tabindex="-1"><a class="header-anchor" href="#难以排查、复现" aria-hidden="true">#</a> 难以排查、复现</h3><ul><li>特定加载顺序 <ul><li>A -&gt; B -&gt; C:d -&gt; A</li></ul></li><li>特定执行时机 <ul><li>A.btn.click() -&gt; B.Model.err</li></ul></li></ul><blockquote><p>如果事情有变坏的可能，不管这种可能性有多小，它总会发生 - 墨菲定律</p></blockquote><ul><li>沙箱隔离（可选）</li></ul><hr><h2 id="资源加载" tabindex="-1"><a class="header-anchor" href="#资源加载" aria-hidden="true">#</a> 资源加载</h2><p><img src="https://github.com/lei4519/picture-bed/raw/main/images/20211228162116.png" alt=""></p><h2 id="生产依赖" tabindex="-1"><a class="header-anchor" href="#生产依赖" aria-hidden="true">#</a> 生产依赖</h2><h2 id="依赖复用" tabindex="-1"><a class="header-anchor" href="#依赖复用" aria-hidden="true">#</a> 依赖复用</h2><p>React</p><ul><li>16.1.0</li><li>16.1.5</li><li>16.2.0</li></ul>',43),_={id:"语义化版本-1",tabindex:"-1"},z=(0,s._)("a",{class:"header-anchor",href:"#语义化版本-1","aria-hidden":"true"},"#",-1),L=(0,s.Uk)(),j=(0,s.Uk)("语义化版本"),q=(0,s.uE)('<p><code>X.Y.Z</code> (16.1.1)</p><ul><li><code>X</code>：做了不兼容的 API 修改</li><li><code>Y</code>：做了向下兼容的功能性新增</li><li><code>Z</code>：做了向下兼容的问题修正</li></ul><p><code>~</code>: 接受 <code>Z</code> 的最新版本 <code>^</code>: 接受 <code>Y.Z</code> 的最新版本</p><blockquote><p>模块联邦实现了运行时的语义化版本管理，在指定的范围内尽量用高的版本</p></blockquote><h3 id="如何保证所有的依赖都遵循了版本语义化" tabindex="-1"><a class="header-anchor" href="#如何保证所有的依赖都遵循了版本语义化" aria-hidden="true">#</a> 如何保证所有的依赖都遵循了版本语义化？</h3><p><img src="https://github.com/lei4519/picture-bed/raw/main/images/20211229104000.png" alt=""></p><h3 id="双刃剑-独立部署" tabindex="-1"><a class="header-anchor" href="#双刃剑-独立部署" aria-hidden="true">#</a> 双刃剑 - 独立部署</h3><p>经过测试的版本，受其他模块影响，在线上运行时被动态升级。</p><h3 id="模块联邦共享依赖" tabindex="-1"><a class="header-anchor" href="#模块联邦共享依赖" aria-hidden="true">#</a> 模块联邦共享依赖</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">new</span> <span class="token class-name">ModuleFederationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  shared<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>dependencies<span class="token punctuation">,</span>\n    react<span class="token operator">:</span> <span class="token punctuation">{</span> singleton<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token string">&quot;react-dom&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> singleton<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p><img src="https://github.com/lei4519/picture-bed/raw/main/images/20211229165522.png" alt=""></p><h3 id="非法-hook-调用" tabindex="-1"><a class="header-anchor" href="#非法-hook-调用" aria-hidden="true">#</a> 非法 Hook 调用</h3><p><img src="https://github.com/lei4519/picture-bed/raw/main/images/20211228163936.png" alt=""><img src="https://github.com/lei4519/picture-bed/raw/main/images/20211228164209.png" alt=""></p><ul><li>React 中 ReactCurrentDispatcher.current 指向 hooks 上下文，区分 mount、update</li><li>ReactDOM.render 执行时，会改变 ReactCurrentDispatcher.current 的指向</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;react&#39;</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">&#39;react-dom&#39;</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>\n  plugins<span class="token operator">:</span> <span class="token punctuation">[</span>\n    <span class="token keyword">new</span> <span class="token class-name">ModuleFederationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      shared<span class="token operator">:</span> <span class="token punctuation">{</span>\n        react<span class="token operator">:</span> <span class="token punctuation">{</span>\n          <span class="token doc-comment comment">/**\n           * 一些库使用全局内部状态（例如 react、react-dom）。\n           * 因此，一次只运行一个库的实例至关重要。\n           */</span>\n          singleton<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p><img src="https://github.com/lei4519/picture-bed/raw/main/images/20211229154632.png" alt=""></p><hr><h3 id="复用" tabindex="-1"><a class="header-anchor" href="#复用" aria-hidden="true">#</a> 复用</h3><ul><li><p>优点</p><ul><li>资源复用</li><li>模块复用（模块联邦）</li></ul></li><li><p>缺点</p><ul><li>依赖版本冲突 <ul><li>很难独立升级</li><li>谨慎独立部署（运行时风险）</li></ul></li></ul></li></ul><h2 id="不复用-全面隔离" tabindex="-1"><a class="header-anchor" href="#不复用-全面隔离" aria-hidden="true">#</a> 不复用 - 全面隔离</h2><ul><li><p>优点</p><ul><li>稳定运行</li><li>独立部署</li><li>独立升级</li></ul></li><li><p>缺点</p><ul><li>资源浪费（重复加载）</li><li>模块不能复用</li></ul></li></ul><hr><hr><h3 id="可控-可信赖-的项目中-模块联邦复用" tabindex="-1"><a class="header-anchor" href="#可控-可信赖-的项目中-模块联邦复用" aria-hidden="true">#</a> 可控（可信赖）的项目中 - 模块联邦复用</h3><p>进行模块拆分、复用，模块相互之间具备调用关系</p><ul><li>版本可控</li><li>模块可信赖（动态升级影响可控）</li></ul><hr><h3 id="不可控-无信赖-的项目中-全面隔离" tabindex="-1"><a class="header-anchor" href="#不可控-无信赖-的项目中-全面隔离" aria-hidden="true">#</a> 不可控（无信赖）的项目中 - 全面隔离</h3><p>进行模块组合、引入</p><ul><li><p>模块相互之间没有调用关系</p><ul><li>创作者中心 + 芝士</li><li>隔离方案 <ul><li>不希望对另一方有任何影响</li></ul></li></ul></li><li><p>模块相互之间有调用关系</p><ul><li>npm 包 <ul><li>经过充分测试后升级，杜绝动态升级风险</li><li>版本可控可回退（单方面回滚）</li></ul></li></ul></li></ul>',31),A={id:"微前端的那些事儿",tabindex:"-1"},Z=(0,s._)("a",{class:"header-anchor",href:"#微前端的那些事儿","aria-hidden":"true"},"#",-1),R=(0,s.Uk)(),U={href:"https://github.com/phodal/microfrontends",target:"_blank",rel:"noopener noreferrer"},Y=(0,s.Uk)("微前端的那些事儿"),C=(0,s.uE)('<p><img src="https://github.com/phodal/microfrontends/raw/master/imgs/angular-split-code-compare.jpg" alt=""></p><p>表格对比：</p><pre><code>   | 标准 Lazyload |   构建时集成  | 构建后集成   | 应用独立\n</code></pre><p>--------|--------------|------------|-------------|------------- 开发流程 | 多个团队在同一个代码库里开发 | 多个团队在不同的代码库里开发 | 多个团队在不同的代码库里开发 | 多个团队在不同的代码库里开发 构建与发布 | 构建时只需要拿这一份代码去构建、部署 | 将不同代码库的代码整合到一起，再构建应用 | 将直接编译成各个项目模块，运行时通过懒加载合并 | 将直接编译成不同的几个应用，运行时通过主工程加载 适用场景 | 单一团队，依赖库少、业务单一 | 多团队，依赖库少、业务单一 | 多团队，依赖库少、业务单一 | 多团队，依赖库多、业务复杂 表现方式 | 开发、构建、运行一体 | 开发分离，构建时集成，运行一体| 开发分离，构建分离，运行一体 | 开发、构建、运行分离</p><p>详细的介绍如下：</p><h3 id="标准-lazyload" tabindex="-1"><a class="header-anchor" href="#标准-lazyload" aria-hidden="true">#</a> 标准 LazyLoad</h3><p>开发流程：多个团队在同一个代码库里开发，构建时只需要拿这一份代码去部署。</p><p>行为：开发、构建、运行一体</p><p>适用场景：单一团队，依赖库少、业务单一</p><h3 id="lazyload-变体-1-构建时集成" tabindex="-1"><a class="header-anchor" href="#lazyload-变体-1-构建时集成" aria-hidden="true">#</a> LazyLoad 变体 1：构建时集成</h3><p>开发流程：多个团队在不同的代码库里开发，在构建时将不同代码库的代码整合到一起，再去构建这个应用。</p><p>适用场景：多团队，依赖库少、业务单一</p><p>变体-构建时集成：开发分离，构建时集成，运行一体</p><h3 id="lazyload-变体-2-构建后集成" tabindex="-1"><a class="header-anchor" href="#lazyload-变体-2-构建后集成" aria-hidden="true">#</a> LazyLoad 变体 2：构建后集成</h3><p>开发流程：多个团队在不同的代码库里开发，在构建时将编译成不同的几份代码，运行时会通过懒加载合并到一起。</p><p>适用场景：多团队，依赖库少、业务单一</p><p>变体-构建后集成：开发分离，构建分离，运行一体</p><h3 id="前端微服务化" tabindex="-1"><a class="header-anchor" href="#前端微服务化" aria-hidden="true">#</a> 前端微服务化</h3><p>开发流程：多个团队在不同的代码库里开发，在构建时将编译成不同的几个应用，运行时通过主工程加载。</p><p>适用场景：多团队，依赖库多、业务复杂</p><p>前端微服务化：开发、构建、运行分离</p><h2 id="总对比" tabindex="-1"><a class="header-anchor" href="#总对比" aria-hidden="true">#</a> 总对比</h2><p>总体的对比如下表所示：</p><table><thead><tr><th>x</th><th>标准 Lazyload</th><th>构建时集成</th><th>构建后集成</th><th>应用独立</th></tr></thead><tbody><tr><td>依赖管理</td><td>统一管理</td><td>统一管理</td><td>统一管理</td><td>各应用独立管理</td></tr><tr><td>部署方式</td><td>统一部署</td><td>统一部署</td><td>可单独部署。更新依赖时，需要全量部署</td><td>可完全独立部署</td></tr><tr><td>首屏加载</td><td>依赖在同一个文件，加载速度慢</td><td>依赖在同一个文件，加载速度慢</td><td>依赖在同一个文件，加载速度慢</td><td>依赖各自管理，首页加载快</td></tr><tr><td>首次加载应用、模块</td><td>只加载模块，速度快</td><td>只加载模块，速度快</td><td>只加载模块，速度快</td><td>单独加载，加载略慢</td></tr><tr><td>前期构建成本</td><td>低</td><td>设计构建流程</td><td>设计构建流程</td><td>设计通讯机制与加载方式</td></tr><tr><td>维护成本</td><td>一个代码库不好管理</td><td>多个代码库不好统一</td><td>后期需要维护组件依赖</td><td>后期维护成本低</td></tr><tr><td>打包优化</td><td>可进行摇树优化、AoT 编译、删除无用代码</td><td>可进行摇树优化、AoT 编译、删除无用代码</td><td>应用依赖的组件无法确定，不能删除无用代码</td><td>可进行摇树优化、AoT 编译、删除无用代码</td></tr></tbody></table>',24),P={},S=(0,e(3744).Z)(P,[["render",function(a,n){const e=(0,s.up)("OutboundLink"),P=(0,s.up)("RouterLink");return(0,s.wg)(),(0,s.iD)(s.HY,null,[t,(0,s._)("h3",l,[p,i,(0,s._)("a",r,[c,(0,s.Wm)(e)])]),o,(0,s._)("h2",d,[u,h,(0,s._)("a",b,[m,(0,s.Wm)(e)])]),k,(0,s._)("h2",g,[f,v,(0,s._)("a",x,[y,(0,s.Wm)(e)])]),w,(0,s._)("h3",_,[z,L,(0,s.Wm)(P,{to:"/technology/Web/semver.org/"},{default:(0,s.w5)((()=>[j])),_:1})]),q,(0,s._)("h2",A,[Z,R,(0,s._)("a",U,[Y,(0,s.Wm)(e)])]),C],64)}]])},3744:(a,n)=>{n.Z=(a,n)=>{const e=a.__vccOpts||a;for(const[a,s]of n)e[a]=s;return e}},2569:(a,n,e)=>{e.r(n),e.d(n,{data:()=>s});const s={key:"v-5747ce8a",path:"/technology/Web/mf.html",title:"模块联邦微前端思考",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"前置 - 模块联邦实现思路",slug:"前置-模块联邦实现思路",children:[{level:3,title:"如何复用？",slug:"如何复用",children:[]},{level:3,title:"语义化版本",slug:"语义化版本",children:[]}]},{level:2,title:"常见微前端观点",slug:"常见微前端观点",children:[]},{level:2,title:"https://micro-frontends.org/",slug:"https-micro-frontends-org",children:[]},{level:2,title:"qiankun(微前端)快问快答",slug:"qiankun-微前端-快问快答",children:[]},{level:2,title:"模块联邦概念",slug:"模块联邦概念",children:[]},{level:2,title:"",slug:"",children:[]},{level:2,title:"趋势",slug:"趋势",children:[]},{level:2,title:"服务器",slug:"服务器",children:[]},{level:2,title:"浏览器",slug:"浏览器",children:[]},{level:2,title:"共用执行环境",slug:"共用执行环境",children:[{level:3,title:"JS 冲突",slug:"js-冲突",children:[]},{level:3,title:"CSS 冲突",slug:"css-冲突",children:[]},{level:3,title:"难以排查、复现",slug:"难以排查、复现",children:[]}]},{level:2,title:"资源加载",slug:"资源加载",children:[]},{level:2,title:"生产依赖",slug:"生产依赖",children:[]},{level:2,title:"依赖复用",slug:"依赖复用",children:[{level:3,title:"语义化版本",slug:"语义化版本-1",children:[]},{level:3,title:"如何保证所有的依赖都遵循了版本语义化？",slug:"如何保证所有的依赖都遵循了版本语义化",children:[]},{level:3,title:"双刃剑 - 独立部署",slug:"双刃剑-独立部署",children:[]},{level:3,title:"模块联邦共享依赖",slug:"模块联邦共享依赖",children:[]},{level:3,title:"非法 Hook 调用",slug:"非法-hook-调用",children:[]},{level:3,title:"复用",slug:"复用",children:[]}]},{level:2,title:"不复用 - 全面隔离",slug:"不复用-全面隔离",children:[{level:3,title:"可控（可信赖）的项目中 - 模块联邦复用",slug:"可控-可信赖-的项目中-模块联邦复用",children:[]},{level:3,title:"不可控（无信赖）的项目中 - 全面隔离",slug:"不可控-无信赖-的项目中-全面隔离",children:[]}]},{level:2,title:"微前端的那些事儿",slug:"微前端的那些事儿",children:[{level:3,title:"标准 LazyLoad",slug:"标准-lazyload",children:[]},{level:3,title:"LazyLoad 变体 1：构建时集成",slug:"lazyload-变体-1-构建时集成",children:[]},{level:3,title:"LazyLoad 变体 2：构建后集成",slug:"lazyload-变体-2-构建后集成",children:[]},{level:3,title:"前端微服务化",slug:"前端微服务化",children:[]}]},{level:2,title:"总对比",slug:"总对比",children:[]}],filePathRelative:"technology/Web/mf.md",git:{updatedTime:165261634e4}}}}]);