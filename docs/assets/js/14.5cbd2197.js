(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{398:function(t,e,s){"use strict";s.r(e);var v=s(11),a=Object(v.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"git-book-笔记"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-book-笔记"}},[t._v("#")]),t._v(" Git Book 笔记")]),t._v(" "),s("ol",[s("li",[t._v("Git & Svn 差异点，理解 Git 工作模式")]),t._v(" "),s("li",[t._v("Git 的基本原理，如果进行版本控制，分支是什么？")]),t._v(" "),s("li",[t._v("模拟实际开发场景")]),t._v(" "),s("li",[t._v("梳理日常开发时的 Git 使用流程")]),t._v(" "),s("li",[t._v("使用 Vscode 对第三步进行实操")])]),t._v(" "),s("h2",{attrs:{id:"git-svn区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-svn区别"}},[t._v("#")]),t._v(" Git & Svn区别")]),t._v(" "),s("h3",{attrs:{id:"svn-集中化版本控制系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#svn-集中化版本控制系统"}},[t._v("#")]),t._v(" Svn: 集中化版本控制系统")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://git-scm.com/book/en/v2/images/centralized.png",alt:"集中化的版本控制图解"}}),t._v(" "),s("h3",{attrs:{id:"git-分布式版本控制系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-分布式版本控制系统"}},[t._v("#")]),t._v(" Git: 分布式版本控制系统")]),t._v(" "),s("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://git-scm.com/book/en/v2/images/distributed.png",alt:"分布式版本控制图解"}}),t._v(" "),s("ul",[s("li",[t._v("拉取项目命令差异点\n"),s("ul",[s("li",[s("code",[t._v("svn checkout http://...")])]),t._v(" "),s("li",[s("code",[t._v("git clone http://...")])])])])]),t._v(" "),s("h3",{attrs:{id:"版本库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本库"}},[t._v("#")]),t._v(" 版本库")]),t._v(" "),s("ul",[s("li",[t._v("工作（项目）目录有一个隐藏目录"),s("code",[t._v(".git")]),t._v("，这个就是Git的版本库。")])]),t._v(" "),s("h3",{attrs:{id:"本地操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地操作"}},[t._v("#")]),t._v(" 本地操作")]),t._v(" "),s("ul",[s("li",[t._v("远程仓库同步版本库")]),t._v(" "),s("li",[t._v("版本控制操作都是本地操作")]),t._v(" "),s("li",[t._v("查看 log、回退版本、提交版本、合并分支、创建分支")]),t._v(" "),s("li",[t._v("分功能点进行提交，确保后续开发不会影响已开发完成的功能，快速定位 功能Bug。\n"),s("ul",[s("li",[t._v("主题色功能实现 commit")]),t._v(" "),s("li",[t._v("历史记录功能实现 commit")]),t._v(" "),s("li",[t._v("拖拽区功能实现 commit")])])]),t._v(" "),s("li",[t._v("Svn commit 依赖于网络和 VPN")])]),t._v(" "),s("h2",{attrs:{id:"git的设计目标（特点）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git的设计目标（特点）"}},[t._v("#")]),t._v(" Git的设计目标（特点）")]),t._v(" "),s("blockquote",[s("p",[t._v("Linus 用来管理 Linux 源码。（Linus自己用 C 语言花了两周时间写的）")]),t._v(" "),s("p",[t._v("Linux 系统：开源项目，由全世界的热心志愿者共同完成的。")])]),t._v(" "),s("ul",[s("li",[t._v("速度")]),t._v(" "),s("li",[t._v("简单的设计")]),t._v(" "),s("li",[t._v("完全分布式")]),t._v(" "),s("li",[t._v("有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）")]),t._v(" "),s("li",[s("strong",[t._v("对非线性开发模式的强力支持（允许成千上万个并行开发的分支）")]),t._v(" "),s("ul",[s("li",[t._v("分支工作流")])])])]),t._v(" "),s("h2",{attrs:{id:"git-基本工作原理，如何进行版本控制？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-基本工作原理，如何进行版本控制？"}},[t._v("#")]),t._v(" Git 基本工作原理，如何进行版本控制？")]),t._v(" "),s("blockquote",[s("p",[t._v("Git对每一次提交直接记录文件快照，而非差异比较")])]),t._v(" "),s("h4",{attrs:{id:"svn-记录差异"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#svn-记录差异"}},[t._v("#")]),t._v(" Svn "),s("strong",[t._v("记录差异")])]),t._v(" "),s("ul",[s("li",[t._v("存储的信息是一组基本文件和每个文件每次提交所产生的差异")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/deltas.png",alt:"存储每个文件与初始版本的差异。"}})]),t._v(" "),s("h4",{attrs:{id:"git-记录快照"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git-记录快照"}},[t._v("#")]),t._v(" Git 记录快照")]),t._v(" "),s("ul",[s("li",[t._v("对提交的文件创建一个快照（blob 对象）")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/snapshots.png",alt:"Git 存储项目随时间改变的快照。"}})]),t._v(" "),s("h3",{attrs:{id:"快照的创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快照的创建"}},[t._v("#")]),t._v(" 快照的创建")]),t._v(" "),s("h4",{attrs:{id:"首次提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#首次提交"}},[t._v("#")]),t._v(" 首次提交")]),t._v(" "),s("ul",[s("li",[t._v("假设有一个新的 git 仓库，我们来创建三个新的文件：README、test.rb、LICENSE，并将这三个文件提交到版本库。")])]),t._v(" "),s("div",{staticClass:"language-console extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ touch README test.rb LICENSE\n$ git add README test.rb LICENSE\n$ git commit -m 'The initial commit of my project'   git cz\n")])])]),s("ul",[s("li",[s("p",[s("code",[t._v("git add")]),t._v("  暂存操作：为工作区中已修改的文件创建快照")]),t._v(" "),s("ul",[s("li",[t._v("暂存操作会为每一个修改文件计算校验和（SHA-1 算法），然后会把当前版本的文件快照保存到 Git 仓库中，最终将校验和（索引）加入到暂存区等待提交")]),t._v(" "),s("li",[t._v("暂存区：暂时存储文件快照，并未提交至版本库")]),t._v(" "),s("li",[t._v("场景：某一个功能开发到了 60%，觉得有另一种实现方案想去尝试。但是 60%的功能不值得我们做一次提交记录，如果直接尝试新的方案，等发现方案不可行的时候，需要自己一步步的回退代码。暂存区可以暂时存储这 60%的代码，一旦发现新方案不可行，直接将新方案的修改进行全部撤回即可。")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("git commit")]),t._v(" 提交版本库")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("创建树对象，记录着目录结构和文件快照索引（可以理解为整个项目的快照）")])]),t._v(" "),s("li",[s("p",[t._v("创建提交对象，保存"),s("strong",[t._v("树")]),t._v("对象和所有的提交信息（作者姓名、邮箱、提交信息）")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/commit-and-tree.png",alt:"首次提交对象及其树结构。"}})])])])])]),t._v(" "),s("h4",{attrs:{id:"再次提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#再次提交"}},[t._v("#")]),t._v(" 再次提交")]),t._v(" "),s("ul",[s("li",[t._v("重复上述操作，这次的提交对象会包含一个指向上次提交对象的指针")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/commits-and-parents.png",alt:"提交对象及其父对象。"}})]),t._v(" "),s("h3",{attrs:{id:"分支的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支的原理"}},[t._v("#")]),t._v(" 分支的原理")]),t._v(" "),s("ul",[s("li",[t._v("Git 分支的本质，记录了某一个提交对象索引（校验和）的文件。")]),t._v(" "),s("li",[s("code",[t._v(".git/refs/heads")])]),t._v(" "),s("li",[t._v("Git 初始化时会自动创建一个默认分支 "),s("code",[t._v("master")]),t._v("，"),s("code",[t._v(".git/refs/heads/master")])]),t._v(" "),s("li",[t._v("每次提交时当前分支会自动指向最新的提交对象。")])]),t._v(" "),s("p",[t._v("![image-20200912150803725](/Users/lay/Library/Application Support/typora-user-images/image-20200912150803725.png)")]),t._v(" "),s("h4",{attrs:{id:"分支创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支创建"}},[t._v("#")]),t._v(" 分支创建")]),t._v(" "),s("div",{staticClass:"language-console extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git branch testing\n")])])]),s("ul",[s("li",[t._v("在"),s("code",[t._v(".git/refs/heads")]),t._v("中创建了"),s("code",[t._v("testing")]),t._v("文件")]),t._v(" "),s("li",[t._v("通过"),s("code",[t._v("HEAD")]),t._v(" 的指针区分所在分支，"),s("code",[t._v("HEAD")]),t._v(" 总是指向当前所在的分支")]),t._v(" "),s("li",[s("code",[t._v("git branch")]),t._v(" 命令仅仅 "),s("strong",[t._v("创建")]),t._v(" 一个新分支，并不会自动切换到新分支中去")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/head-to-master.png",alt:"HEAD 指向当前所在的分支。"}})]),t._v(" "),s("h4",{attrs:{id:"分支切换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支切换"}},[t._v("#")]),t._v(" 分支切换")]),t._v(" "),s("div",{staticClass:"language-console extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git checkout testing\n")])])]),s("ul",[s("li",[s("code",[t._v("HEAD")]),t._v(" 就指向 "),s("code",[t._v("testing")]),t._v(" 分支")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/head-to-testing.png",alt:"HEAD 指向当前所在的分支。"}})]),t._v(" "),s("h4",{attrs:{id:"分支总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支总结"}},[t._v("#")]),t._v(" 分支总结")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Git 的分支实质上仅是包含所指对象校验和（长度为 40 的 SHA-1 值字符串）的文件，所以它的创建和销毁都异常高效。 创建一个新分支就相当于往一个文件中写入 41 个字节（40 个字符和 1 个换行符）")])]),t._v(" "),s("li",[s("p",[t._v("其他大多数版本控制系统在创建分支时，需要将所有的项目文件都复制一遍，并保存到一个特定的目录。 完成这个过程所需时间的长短，完全取决于项目的规模。")])]),t._v(" "),s("li",[s("p",[t._v("而在 Git 中，任何规模的项目都能在瞬间创建新分支。 同时，由于每次提交都会记录父对象，所以在分支合并时也是同样的简单和高效。")])]),t._v(" "),s("li",[s("p",[t._v("这些高效的特性使得 Git 鼓励开发人员频繁地创建和使用分支。")])])]),t._v(" "),s("h3",{attrs:{id:"实际场景模拟"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实际场景模拟"}},[t._v("#")]),t._v(" 实际场景模拟")]),t._v(" "),s("ul",[s("li",[t._v("marset 分支：线上分支")]),t._v(" "),s("li",[t._v("iss53分支：开发分支")]),t._v(" "),s("li",[t._v("起点：项目1.0版本开发测试完成，将开发分支的代码合并到主分支上，部署上线")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/basic-branching-2.png",alt:"创建一个新分支指针。"}})]),t._v(" "),s("ul",[s("li",[s("p",[t._v("开发2.0 版本，并进行一些功能提交，线上版本依旧指向发版时的提交对象")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/basic-branching-3.png",alt:" 分支随着工作的进展向前推进。"}})])]),t._v(" "),s("li",[s("p",[t._v("线上版本紧急 BUG")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("切换回 "),s("code",[t._v("master")]),t._v(" 分支")]),t._v(" "),s("ul",[s("li",[t._v("当前开发分支工作目录和暂存区里还有没被提交的修改，这些改动可能会和主分支产生冲突，从而阻止 Git 切换到主分支。")]),t._v(" "),s("li",[t._v("切换时需要将修改进行暂存操作"),s("code",[t._v("git stash")]),t._v("或者提交操作"),s("code",[t._v("git commit")])]),t._v(" "),s("li",[t._v("永远不会在 "),s("code",[t._v("master")]),t._v(" 分支中进行代码开发， "),s("code",[t._v("master")]),t._v(" 分支的代码都是合并的别的分支，以此保证 "),s("code",[t._v("master")]),t._v(" 分支的稳定性（线上版本的稳定性）")])])]),t._v(" "),s("li",[s("p",[t._v("新建紧急修复"),s("code",[t._v("hotfix")]),t._v("分支，在该分支上工作直到问题解决，并提交修改。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/basic-branching-4.png",alt:"基于  分支的紧急问题分支（hotfix branch）。"}})])]),t._v(" "),s("li",[s("p",[s("code",[t._v("master")]),t._v(" 合并 "),s("code",[t._v("hotfix")]),t._v(" 分支，测试部署上线")]),t._v(" "),s("div",{staticClass:"language-console extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git checkout master\n$ git merge hotfix\nFast-forward\n")])])]),s("ul",[s("li",[t._v("快进（Fast-forward）\n"),s("ul",[s("li",[t._v("要合并的分支所指向的提交对象是你所在分支的提交对象的直接后继， Git 会直接将指针向前移动，因为这种情况下的合并操作没有需要解决的分歧")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/basic-branching-5.png",alt:" 被快进到 。"}})])]),t._v(" "),s("li",[s("p",[t._v("删除 "),s("code",[t._v("hotfix")]),t._v(" 分支，因为我们已经不再需要它了 ——  "),s("code",[t._v("master")]),t._v(" 分支已经指向了同一个位置")]),t._v(" "),s("div",{staticClass:"language-console extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git branch -d hotfix\n")])])])]),t._v(" "),s("li",[s("p",[t._v("回到开发分支继续工作")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("hotfix")]),t._v(" 分支所做的修改，并没有合并到开发分支上")])])])])])]),t._v(" "),s("ol",[s("li",[s("p",[t._v("使用 "),s("code",[t._v("git merge master")]),t._v(" 命令将 "),s("code",[t._v("master")]),t._v(" 分支合并入 开发分支（推荐）")])]),t._v(" "),s("li",[s("p",[t._v("等到 开发分支开发完成，再将其合并回 "),s("code",[t._v("master")]),t._v(" 分支")])])]),t._v(" "),s("ul",[s("li",[t._v("以上两种操作，在 git 的使用上没有区别，都是合并操作。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/basic-branching-6.png",alt:"继续在  分支上的工作。"}})]),t._v(" "),s("ol",{attrs:{start:"6"}},[s("li",[s("p",[t._v("2.0开发测试完成，将开发分支的代码合并到主分支上，部署上线")]),t._v(" "),s("div",{staticClass:"language-console extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("  $ git checkout master\n  $ git merge iss53\n  Merge made by the 'recursive' strategy. 通过“递归”策略进行合并。\n")])])]),s("ul",[s("li",[s("code",[t._v("master")]),t._v(" 分支所在提交对象并不是 "),s("code",[t._v("iss53")]),t._v(" 分支所在提交对象的直接祖先，Git 会使用两个分支的末端所指的快照（"),s("code",[t._v("C4")]),t._v(" 和 "),s("code",[t._v("C5")]),t._v("）以及这两个分支的公共祖先（"),s("code",[t._v("C2")]),t._v("），做一个三方合并")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/basic-merging-1.png",alt:"一次典型合并中所用到的三个快照。"}})]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Git 会将合并的结果做了一个新的快照并且自动创建一个新的提交指向它。")])]),t._v(" "),s("li",[s("p",[t._v("这种提交被称为合并提交，因为他不止有一个父提交对象。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/basic-merging-2.png",alt:"一个合并提交。"}})])])])])]),t._v(" "),s("h4",{attrs:{id:"合并冲突"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#合并冲突"}},[t._v("#")]),t._v(" 合并冲突")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如果我们在两个不同的分支中，对同一个文件的同一个部分进行了不同的修改，Git 就没法干净的合并它们。")])]),t._v(" "),s("li",[s("p",[t._v("此时 Git 做了合并，但是没有自动地创建一个新的合并提交。 Git 会暂停下来，等待你去解决合并产生的冲突。")])]),t._v(" "),s("li",[s("p",[t._v("确定之前有冲突的的文件都已经暂存了，输入 "),s("code",[t._v("git commit")]),t._v(" 来完成合并提交。 默认情况下提交信息看起来像下面这个样子：")]),t._v(" "),s("div",{staticClass:"language-console extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Merge branch 'iss53'\n\nConflicts:\n    index.html\n#\n# It looks like you may be committing a merge.\n# If this is not correct, please remove the file\n#\t.git/MERGE_HEAD\n# and try again.\n\n\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch master\n# All conflicts fixed but you are still merging.\n#\n# Changes to be committed:\n#\tmodified:   index.html\n#\n")])])])]),t._v(" "),s("li",[s("p",[t._v("如果你觉得上述的信息不够充分，不能完全体现分支合并的过程，你可以修改上述信息， 添加一些细节给未来检视这个合并的读者一些帮助，告诉他们你是如何解决合并冲突的，以及理由是什么。")])])]),t._v(" "),s("h4",{attrs:{id:"中断一次合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#中断一次合并"}},[t._v("#")]),t._v(" 中断一次合并")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("我们可能不想处理冲突这种情况，可以通过 "),s("code",[t._v("git merge --abort")]),t._v(" 来简单地退出合并")]),t._v(" "),s("div",{staticClass:"language-console extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git merge --abort\n")])])]),s("ul",[s("li",[s("code",[t._v("git merge --abort")]),t._v(" 选项会尝试恢复到运行合并前的状态。")]),t._v(" "),s("li",[t._v("合并前确保工作目录中的修改都被提交或暂存。不然此命令会导致那些未被保存的修改也被恢复到修改之前的状态。")])])])]),t._v(" "),s("h4",{attrs:{id:"忽略空白"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#忽略空白"}},[t._v("#")]),t._v(" 忽略空白")]),t._v(" "),s("ul",[s("li",[t._v("如果一次合并中有大量关于空白的问题，你可以直接中止它并重做一次，这次带上以下参数之一\n"),s("ul",[s("li",[s("code",[t._v("-Xignore-all-space whitespace")]),t._v("：在比较行时 "),s("strong",[t._v("完全忽略")]),t._v(" 空白修改")]),t._v(" "),s("li",[s("code",[t._v("-Xignore-space-change whitespace")]),t._v(" ：将一个空白符与多个连续的空白字符视作等价的")]),t._v(" "),s("li",[t._v("如果你的团队中的某个人可能不小心重新格式化空格为制表符或者相反的操作，这会是一个救命稻草")])])])]),t._v(" "),s("h4",{attrs:{id:"变基"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变基"}},[t._v("#")]),t._v(" 变基")]),t._v(" "),s("ul",[s("li",[t._v("和 "),s("code",[t._v("merge")]),t._v("一样，用来合并分支")]),t._v(" "),s("li",[t._v("合并方案是：将当前分支的所有提交操作，在变基分支上重新执行一遍。")]),t._v(" "),s("li",[t._v("需要合理使用，否则会导致别人提交的代码丢失。")]),t._v(" "),s("li",[s("code",[t._v("merge")]),t._v("合并时会产生很多无用的 Merge 信息，尤其是多分支开发合并时，时间长了之后整个项目提交信息会非常杂乱。")]),t._v(" "),s("li",[t._v("历史记录清晰，看起来就像是在一个分支中开发的代码。方便版本回退和 bug 追查。")]),t._v(" "),s("li",[t._v("黄金法则：在本地分支中对使用变基来更新线上分支代码。")]),t._v(" "),s("li",[t._v("大多数公司不使用变基，只是用合并\n"),s("ul",[s("li",[t._v("merge 可以实现结果，不在乎日志是否杂乱。")]),t._v(" "),s("li",[t._v("变基概念不好理解，在错误的工作流上使用，会导致别人的工作成果完全丢失。")])])])]),t._v(" "),s("h2",{attrs:{id:"运程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运程仓库"}},[t._v("#")]),t._v(" 运程仓库")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("下载远程仓库")]),t._v(" "),s("ol",[s("li",[s("p",[s("code",[t._v("git clone 仓库地址")])])]),t._v(" "),s("li",[s("p",[t._v("本地初始化 git 仓库")])])]),t._v(" "),s("div",{staticClass:"language-console extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git init\n$ git add .\n$ git commit -m 'initial project version'\n$ git remote add origin git@github.com\n$ git push -u origin master\n")])])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("git pull")]),t._v("拉取远程仓库代码")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("git push")]),t._v("推送本地仓库至远程仓库")])])]),t._v(" "),s("h3",{attrs:{id:"分支开发工作流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支开发工作流"}},[t._v("#")]),t._v(" 分支开发工作流")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("master")]),t._v("线上分支：绝对稳定，此版本代码可以随时发布线上，总是合并"),s("code",[t._v("test")]),t._v("测试分支或紧急修复分支代码。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("test")]),t._v("测试分支：提交测试线的代码，总是合并"),s("code",[t._v("develop")]),t._v("测试分支代码。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("develop")]),t._v("开发分支：共享分支，总是合并本地分支代码。")])]),t._v(" "),s("li",[s("p",[t._v("临时、修复、功能分支：本地分支，各功能开发，开发完成合并入开发分支。")]),t._v(" "),s("ul",[s("li",[t._v("三个线上分支总是在合并代码，不要直接在这三个分支上进行代码开发。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/lr-branches-2.png",alt:"趋于稳定分支的工作流（“silo”）视图。"}})])])]),t._v(" "),s("h2",{attrs:{id:"打标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#打标签"}},[t._v("#")]),t._v(" 打标签")]),t._v(" "),s("ul",[s("li",[t._v("提交对象的索引是 hash 值，不容易记录，标签就是给提交对象定义个别名。")]),t._v(" "),s("li",[s("code",[t._v("git tag <tagname>")]),t._v("给当前分支打标签，也可以在后面指定一个commit id，给对应的提交对象打标签。")]),t._v(" "),s("li",[s("code",[t._v('git tag -a <tagname> -m "blablabla..."')]),t._v("可以指定标签信息。")]),t._v(" "),s("li",[t._v("命令"),s("code",[t._v("git tag")]),t._v("可以查看所有标签。")]),t._v(" "),s("li",[t._v("命令"),s("code",[t._v("git push origin <tagname>")]),t._v("可以推送一个本地标签。")]),t._v(" "),s("li",[t._v("命令"),s("code",[t._v("git push origin --tags")]),t._v("可以推送全部未推送过的本地标签。")]),t._v(" "),s("li",[t._v("命令"),s("code",[t._v("git tag -d <tagname>")]),t._v("可以删除一个本地标签。")]),t._v(" "),s("li",[t._v("命令"),s("code",[t._v("git push origin :refs/tags/<tagname>")]),t._v("可以删除一个远程标签。")])]),t._v(" "),s("h2",{attrs:{id:"实际开发流程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实际开发流程"}},[t._v("#")]),t._v(" 实际开发流程")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("使用"),s("code",[t._v("git clone")]),t._v("下载仓库")])]),t._v(" "),s("li",[s("p",[t._v("基于"),s("code",[t._v("develop")]),t._v("分支创建本地分支，开发过程中针对每个功能点进行提交记录。")])]),t._v(" "),s("li",[s("p",[t._v("开发完成后：")]),t._v(" "),s("ol",[s("li",[t._v("切换至开发分支，使用"),s("code",[t._v("git pull")]),t._v("，拉取开发分支最新代码。")]),t._v(" "),s("li",[t._v("切换至本地分支，并确保本地分支的代码已全部提交或暂存，这使得我们变基过程中可以随时变基过程中所尝试的所有事情。")]),t._v(" "),s("li",[t._v("使用"),s("code",[t._v("git rebase develop")]),t._v("合并开发分支的代码，如有代码冲突，解决后需要重新提交合并对象。")]),t._v(" "),s("li",[t._v("切换至开发分支，使用"),s("code",[t._v("git merge")]),t._v("合并本地分支，使用"),s("code",[t._v("git push")]),t._v("推送远程仓库。")])])]),t._v(" "),s("li",[s("p",[t._v("切换至测试分支，使用"),s("code",[t._v("git pull")]),t._v("拉取最新代码。")])]),t._v(" "),s("li",[s("p",[t._v("使用"),s("code",[t._v("git merge develop")]),t._v("合并开发分支代码，使用"),s("code",[t._v("git push")]),t._v("推送远程仓库，部署测试。")])]),t._v(" "),s("li",[s("p",[t._v("测试完成，切换至"),s("code",[t._v("master")]),t._v("分支，使用"),s("code",[t._v("git pull")]),t._v("拉取最新代码。")])]),t._v(" "),s("li",[s("p",[t._v("使用"),s("code",[t._v("git merge test")]),t._v("合并测试分支代码，使用"),s("code",[t._v("git push")]),t._v("推送远程仓库，部署上线。")])]),t._v(" "),s("li",[s("p",[t._v("需要修复紧急线上 bug，在"),s("code",[t._v("master")]),t._v("分支新建紧急修复分支，修复问题直到完成。")])]),t._v(" "),s("li",[s("p",[t._v("使用"),s("code",[t._v("master")]),t._v("分支合并紧急修复分支，推送远程仓库并部署。")])]),t._v(" "),s("li",[s("p",[t._v("在紧急修复分支执行第 3 步操作。将代码同步至开发分支。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("以上操作只会在"),s("code",[t._v("git rebase")]),t._v("时有可能会遇到代码冲突。所以上述所有 "),s("code",[t._v("merge")]),t._v(" 操作都是快进操作。")])]),t._v(" "),s("blockquote",[s("p",[t._v("git rebase -i 可以修改提交记录，具体可以查看官网教程 - 重写历史。应该只对本地分支进行操作。")])]),t._v(" "),s("h2",{attrs:{id:"commit-message-规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#commit-message-规范"}},[t._v("#")]),t._v(" commit message 规范")]),t._v(" "),s("blockquote",[s("p",[t._v("Commit message一般包括三部分：Header、Body和Footer。")])]),t._v(" "),s("h3",{attrs:{id:"header"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#header"}},[t._v("#")]),t._v(" Header")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("type(scope):subject\n")])])]),s("ul",[s("li",[t._v("type：用于说明commit的类别，规定为如下几种\n"),s("ul",[s("li",[t._v("feat：新增功能；")]),t._v(" "),s("li",[t._v("fix：修复bug；")]),t._v(" "),s("li",[t._v("docs：修改文档；")]),t._v(" "),s("li",[t._v("refactor：代码重构，未新增任何功能和修复任何bug；")]),t._v(" "),s("li",[t._v("build：改变构建流程，新增依赖库、工具等（例如webpack修改）；")]),t._v(" "),s("li",[t._v("style：仅仅修改了空格、缩进等，不改变代码逻辑；")]),t._v(" "),s("li",[t._v("perf：改善性能和体现的修改；")]),t._v(" "),s("li",[t._v("chore：非src和test的修改；")]),t._v(" "),s("li",[t._v("test：测试用例的修改；")]),t._v(" "),s("li",[t._v("ci：自动化流程配置修改；")]),t._v(" "),s("li",[t._v("revert：回滚到上一个版本；")])])]),t._v(" "),s("li",[t._v("scope：【可选】用于说明commit的影响范围")]),t._v(" "),s("li",[t._v("subject：commit的简要说明，尽量简短")])]),t._v(" "),s("h3",{attrs:{id:"body"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#body"}},[t._v("#")]),t._v(" Body")]),t._v(" "),s("p",[t._v("对本次commit的详细描述，可分多行")]),t._v(" "),s("h3",{attrs:{id:"footer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#footer"}},[t._v("#")]),t._v(" Footer")]),t._v(" "),s("ul",[s("li",[t._v("不兼容变动：需要描述相关信息")]),t._v(" "),s("li",[t._v("关闭指定Issue：输入Issue信息")])]),t._v(" "),s("h2",{attrs:{id:"配置commit提示工具"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#配置commit提示工具"}},[t._v("#")]),t._v(" 配置Commit提示工具")]),t._v(" "),s("p",[t._v("首先，全局安装工具：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("cnpm install commitizen cz-conventional-changelog -g\n")])])]),s("p",[t._v("生成配置文件：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('echo \'{\n    "path": "./node_modules/cz-conventional-changelog",\n    "types": {\n      "feat": {\n        "title": "新功能",\n        "description": "新增一个功能"\n      },\n      "fix": {\n        "title": "修复BUG",\n        "description": "修复BUG"\n      },\n      "docs": {\n        "title": "文档",\n        "description": "修改文档"\n      },\n      "refactor": {\n        "title": "重构",\n        "description": "代码重构，未新增任何功能和修复任何bug"\n      },\n      "build": {\n        "title": "构建",\n        "description": "改变构建流程，新增依赖库、工具、修改webpack配置等"\n      },\n      "style": {\n        "title": "代码样式",\n        "description": "代码格式化类，仅仅修改了空格、缩进等，不改变代码逻辑"\n      },\n      "perf": {\n        "title": "性能优化",\n        "description": "改善性能和体现的修改"\n      },\n      "chore": {\n        "title": "杂项",\n        "description": "非源代码和测试文件的修改，（包括但不限于文档、代码生成等, 比如修改了README等等）"\n      },\n      "deps": {\n        "title": "升级依赖",\n        "description": "升级项目依赖版本"\n      },\n      "test": {\n        "title": "测试",\n        "description": "用于测试的修改"\n      },\n      "ci": {\n        "title": "自动化",\n        "description": "自动化流程配置修改"\n      },\n      "revert": {\n        "title": "回滚",\n        "description": "回滚到上一个版本"\n      }\n    }\n  }\' > ~/.czrc\n')])])]),s("p",[t._v("提交时使用"),s("code",[t._v("git cz")]),t._v("代替"),s("code",[t._v("git commit")])]),t._v(" "),s("p",[t._v("⚠️注意要使用命令行进行代码提交，不要再使用vscode中的Git提交功能(这个还是 "),s("code",[t._v("git commit")]),t._v(")")]),t._v(" "),s("h2",{attrs:{id:"为项目加入提交信息检查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为项目加入提交信息检查"}},[t._v("#")]),t._v(" 为项目加入提交信息检查")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("每次提交版本时自动检查提交信息是否符合规范")]),t._v(" "),s("ol",[s("li",[t._v("安装依赖")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("cnpm install --save-dev @commitlint/config-conventional @commitlint/cli husky\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[s("p",[t._v("在项目根目录执行，生成配置文件")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("echo 'module.exports = {\n  extends: ['@commitlint/config-conventional'],\n  rules: {\n    'type-enum': [\n      2,\n      'always',\n      [\n        'feat',\n        'fix',\n        'docs',\n        'refactor',\n        'build',\n        'style',\n        'perf',\n        'chore',\n        'deps',\n        'test',\n        'ci',\n        'revert'\n      ]\n    ]\n  }\n}' > commitlint.config.js\necho '{\n  \"hooks\": {\n      \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\"\n    }\n}' > .huskyrc\n")])])])])])])]),t._v(" "),s("h2",{attrs:{id:"为项目增加提交时eslint检查和修复"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为项目增加提交时eslint检查和修复"}},[t._v("#")]),t._v(" 为项目增加提交时Eslint检查和修复")]),t._v(" "),s("ol",[s("li",[t._v("安装依赖")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("cnpm i lint-staged --save-dev\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("生成配置文件"),s("code",[t._v(".lintstagedrc")])])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'{\n  "src/**/*.{js,jsx,txs,ts,vue}": "eslint --fix"\n}\'')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" .lintstagedrc\n")])])]),s("ol",{attrs:{start:"3"}},[s("li",[s("p",[t._v("配置"),s("code",[t._v(".huskyrc")]),t._v("，增加预提交钩子")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hooks"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"pre-commit"')]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lint-staged --no-stash"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("配置完成后，提交代码时会自动做Eslint检查和修复，此步骤如果无法通过则需要重新提交代码。")]),t._v(" "),s("ol",[s("li",[t._v("如有错误性 (errors) 问题，需要解决错误重新提交。")]),t._v(" "),s("li",[t._v("如有提示性 (warning)问题（代码格式化），会自动修复并将修改暂存（只是暂存，还是需要重新提交代码）。")])])])])])}),[],!1,null,null,null);e.default=a.exports}}]);