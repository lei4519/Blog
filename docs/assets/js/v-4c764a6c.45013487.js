"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[890],{4891:(n,s,a)=>{a.r(s),a.d(s,{default:()=>u});var e=a(6252);const t=(0,e._)("h1",{id:"使用intersectionobserver实现图片懒加载",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#使用intersectionobserver实现图片懒加载","aria-hidden":"true"},"#"),(0,e.Uk)(" 使用IntersectionObserver实现图片懒加载")],-1),p=(0,e._)("h2",{id:"intersectionobserver介绍",tabindex:"-1"},[(0,e._)("a",{class:"header-anchor",href:"#intersectionobserver介绍","aria-hidden":"true"},"#"),(0,e.Uk)(" IntersectionObserver介绍")],-1),o=(0,e.Uk)("mdn："),c={href:"https://developer.mozilla.org/zh-CN/docs/Web/API/IntersectionObserver",target:"_blank",rel:"noopener noreferrer"},r=(0,e.Uk)("Intersection Observer"),l=(0,e.uE)('<p>Intersection Observer可以异步的监听元素是否进入了可视区域内，当元素进入可视区域后，会触发相应的回调函数。</p><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token comment">// 实例化一个交叉观察者，并传入回调函数</span>\n<span class="token keyword">const</span> intersectionObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>\n<span class="token comment">// 调用observe方法，监听需要观察的dom元素</span>\nintersectionObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&#39;.scrollerFooter&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="图片懒加载" tabindex="-1"><a class="header-anchor" href="#图片懒加载" aria-hidden="true">#</a> 图片懒加载</h2><p>图片懒加载的实现原理都是一样的，通过data-src属性保存真正的src地址，等到了触发条件时（即将进入视口），将data-src的值赋予src属性，开始加载图片。</p><p>有了IntersectionObserver我们可以很轻松的知道图片进入视口的时机，只需要再callback回调函数中替换src属性就可以了。</p><p>这里值得注意的一点是，一般情况下，我们并不希望图片在完全进入视口后才开始加载图片，我们需要让用户尽可能的感知不到图片的加载替换。所以我们将加载时机提前一点，比如说一屏的高度，那如果来设置这个高度呢。IntersectionObserver在初始化时允许传入一个配置项，其中的rootMargin选项是用来标注额外的margin带来的位置信息判断错误问题，我们可以利用这一点，比如我们将margin-bottom设为200px，IntersectionObserver就会在视口距离监听元素200px时去触发回调函数，这就给了我们可以控制距离底部的距离的方法。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token string">&quot;loading.jpg&quot;</span> data<span class="token operator">-</span>src<span class="token operator">=</span><span class="token string">&quot;realSrc.jpg&quot;</span><span class="token operator">&gt;</span>\n\n<span class="token keyword">const</span> intersectionObserver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IntersectionObserver</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">entries</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// entries是一个数组，我们会观察多个元素，所以会有多个元素同时进入视口这种情况</span>\n  <span class="token comment">// intersectionRatio代表了元素进入视口的比例，当元素完全进入视口时值为1，当元素没有进入视口时值为0</span>\n  <span class="token comment">// intersectionObserver在监听dom元素后就会执行一次callback，所以这里需要判断一下</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>entries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>intersectionRatio <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>\n  <span class="token comment">// 开始替换src</span>\n  entries<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>src <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>src\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>rootMargin<span class="token operator">:</span> <span class="token string">&#39;0px 0px 200px 0px&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 监听所有data-src属性的元素</span>\ndocument<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;[data-src]&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">element</span> <span class="token operator">=&gt;</span> intersectionObserver<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>',8),i={},u=(0,a(3744).Z)(i,[["render",function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[t,p,(0,e._)("ul",null,[(0,e._)("li",null,[o,(0,e._)("a",c,[r,(0,e.Wm)(a)])])]),l],64)}]])},3744:(n,s)=>{s.Z=(n,s)=>{const a=n.__vccOpts||n;for(const[n,e]of s)a[n]=e;return a}},1371:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-4c764a6c",path:"/technology/Web/lazy-img.html",title:"使用IntersectionObserver实现图片懒加载",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"IntersectionObserver介绍",slug:"intersectionobserver介绍",children:[{level:3,title:"基本用法",slug:"基本用法",children:[]}]},{level:2,title:"图片懒加载",slug:"图片懒加载",children:[]}],filePathRelative:"technology/Web/lazy-img.md",git:{updatedTime:1592231182e3}}}}]);